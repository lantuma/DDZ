// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: HotfixMessage.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using scg = global::System.Collections.Generic;
namespace ETHotfix {

  #region Messages
  public partial class G2C_TestHotfixMessage : pb::IMessage {
    private static readonly pb::MessageParser<G2C_TestHotfixMessage> _parser = new pb::MessageParser<G2C_TestHotfixMessage>(() => (G2C_TestHotfixMessage)MessagePool.Instance.Fetch(typeof(G2C_TestHotfixMessage)));
    public static pb::MessageParser<G2C_TestHotfixMessage> Parser { get { return _parser; } }

    private string info_ = "";
    public string Info {
      get { return info_; }
      set {
        info_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Info.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Info);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (Info.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Info);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      info_ = "";
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Info = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public partial class C2M_TestActorRequest : pb::IMessage {
    private static readonly pb::MessageParser<C2M_TestActorRequest> _parser = new pb::MessageParser<C2M_TestActorRequest>(() => (C2M_TestActorRequest)MessagePool.Instance.Fetch(typeof(C2M_TestActorRequest)));
    public static pb::MessageParser<C2M_TestActorRequest> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private long actorId_;
    public long ActorId {
      get { return actorId_; }
      set {
        actorId_ = value;
      }
    }

    private string info_ = "";
    public string Info {
      get { return info_; }
      set {
        info_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Info.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Info);
      }
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (ActorId != 0L) {
        output.WriteRawTag(216, 5);
        output.WriteInt64(ActorId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (ActorId != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(ActorId);
      }
      if (Info.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Info);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      info_ = "";
      rpcId_ = 0;
      actorId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Info = input.ReadString();
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 728: {
            ActorId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public partial class M2C_TestActorResponse : pb::IMessage {
    private static readonly pb::MessageParser<M2C_TestActorResponse> _parser = new pb::MessageParser<M2C_TestActorResponse>(() => (M2C_TestActorResponse)MessagePool.Instance.Fetch(typeof(M2C_TestActorResponse)));
    public static pb::MessageParser<M2C_TestActorResponse> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private int error_;
    public int Error {
      get { return error_; }
      set {
        error_ = value;
      }
    }

    private string message_ = "";
    public string Message {
      get { return message_; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private string info_ = "";
    public string Info {
      get { return info_; }
      set {
        info_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Info.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Info);
      }
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (Error != 0) {
        output.WriteRawTag(216, 5);
        output.WriteInt32(Error);
      }
      if (Message.Length != 0) {
        output.WriteRawTag(226, 5);
        output.WriteString(Message);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (Error != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Error);
      }
      if (Message.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Message);
      }
      if (Info.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Info);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      info_ = "";
      rpcId_ = 0;
      error_ = 0;
      message_ = "";
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Info = input.ReadString();
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 728: {
            Error = input.ReadInt32();
            break;
          }
          case 738: {
            Message = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public partial class PlayerInfo : pb::IMessage {
    private static readonly pb::MessageParser<PlayerInfo> _parser = new pb::MessageParser<PlayerInfo>(() => (PlayerInfo)MessagePool.Instance.Fetch(typeof(PlayerInfo)));
    public static pb::MessageParser<PlayerInfo> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      rpcId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public partial class C2G_PlayerInfo : pb::IMessage {
    private static readonly pb::MessageParser<C2G_PlayerInfo> _parser = new pb::MessageParser<C2G_PlayerInfo>(() => (C2G_PlayerInfo)MessagePool.Instance.Fetch(typeof(C2G_PlayerInfo)));
    public static pb::MessageParser<C2G_PlayerInfo> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      rpcId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public partial class G2C_PlayerInfo : pb::IMessage {
    private static readonly pb::MessageParser<G2C_PlayerInfo> _parser = new pb::MessageParser<G2C_PlayerInfo>(() => (G2C_PlayerInfo)MessagePool.Instance.Fetch(typeof(G2C_PlayerInfo)));
    public static pb::MessageParser<G2C_PlayerInfo> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private int error_;
    public int Error {
      get { return error_; }
      set {
        error_ = value;
      }
    }

    private string message_ = "";
    public string Message {
      get { return message_; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private global::ETHotfix.PlayerInfo playerInfo_;
    public global::ETHotfix.PlayerInfo PlayerInfo {
      get { return playerInfo_; }
      set {
        playerInfo_ = value;
      }
    }

    private static readonly pb::FieldCodec<global::ETHotfix.PlayerInfo> _repeated_playerInfos_codec
        = pb::FieldCodec.ForMessage(18, global::ETHotfix.PlayerInfo.Parser);
    private pbc::RepeatedField<global::ETHotfix.PlayerInfo> playerInfos_ = new pbc::RepeatedField<global::ETHotfix.PlayerInfo>();
    public pbc::RepeatedField<global::ETHotfix.PlayerInfo> PlayerInfos {
      get { return playerInfos_; }
      set { playerInfos_ = value; }
    }

    private static readonly pb::FieldCodec<string> _repeated_testRepeatedString_codec
        = pb::FieldCodec.ForString(26);
    private pbc::RepeatedField<string> testRepeatedString_ = new pbc::RepeatedField<string>();
    public pbc::RepeatedField<string> TestRepeatedString {
      get { return testRepeatedString_; }
      set { testRepeatedString_ = value; }
    }

    private static readonly pb::FieldCodec<int> _repeated_testRepeatedInt32_codec
        = pb::FieldCodec.ForInt32(34);
    private pbc::RepeatedField<int> testRepeatedInt32_ = new pbc::RepeatedField<int>();
    public pbc::RepeatedField<int> TestRepeatedInt32 {
      get { return testRepeatedInt32_; }
      set { testRepeatedInt32_ = value; }
    }

    private static readonly pb::FieldCodec<long> _repeated_testRepeatedInt64_codec
        = pb::FieldCodec.ForInt64(42);
    private pbc::RepeatedField<long> testRepeatedInt64_ = new pbc::RepeatedField<long>();
    public pbc::RepeatedField<long> TestRepeatedInt64 {
      get { return testRepeatedInt64_; }
      set { testRepeatedInt64_ = value; }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (playerInfo_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(PlayerInfo);
      }
      playerInfos_.WriteTo(output, _repeated_playerInfos_codec);
      testRepeatedString_.WriteTo(output, _repeated_testRepeatedString_codec);
      testRepeatedInt32_.WriteTo(output, _repeated_testRepeatedInt32_codec);
      testRepeatedInt64_.WriteTo(output, _repeated_testRepeatedInt64_codec);
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (Error != 0) {
        output.WriteRawTag(216, 5);
        output.WriteInt32(Error);
      }
      if (Message.Length != 0) {
        output.WriteRawTag(226, 5);
        output.WriteString(Message);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (Error != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Error);
      }
      if (Message.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Message);
      }
      if (playerInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(PlayerInfo);
      }
      size += playerInfos_.CalculateSize(_repeated_playerInfos_codec);
      size += testRepeatedString_.CalculateSize(_repeated_testRepeatedString_codec);
      size += testRepeatedInt32_.CalculateSize(_repeated_testRepeatedInt32_codec);
      size += testRepeatedInt64_.CalculateSize(_repeated_testRepeatedInt64_codec);
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      if (playerInfo_ != null) MessagePool.Instance.Recycle(playerInfo_); playerInfo_ = null;
      for (int i = 0; i < playerInfos_.Count; i++) { MessagePool.Instance.Recycle(playerInfos_[i]); }
      playerInfos_.Clear();
      testRepeatedString_.Clear();
      testRepeatedInt32_.Clear();
      testRepeatedInt64_.Clear();
      rpcId_ = 0;
      error_ = 0;
      message_ = "";
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (playerInfo_ == null) {
              playerInfo_ = new global::ETHotfix.PlayerInfo();
            }
            input.ReadMessage(playerInfo_);
            break;
          }
          case 18: {
            playerInfos_.AddEntriesFrom(input, _repeated_playerInfos_codec);
            break;
          }
          case 26: {
            testRepeatedString_.AddEntriesFrom(input, _repeated_testRepeatedString_codec);
            break;
          }
          case 34:
          case 32: {
            testRepeatedInt32_.AddEntriesFrom(input, _repeated_testRepeatedInt32_codec);
            break;
          }
          case 42:
          case 40: {
            testRepeatedInt64_.AddEntriesFrom(input, _repeated_testRepeatedInt64_codec);
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 728: {
            Error = input.ReadInt32();
            break;
          }
          case 738: {
            Message = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public partial class Actor_Test1_Ntt : pb::IMessage {
    private static readonly pb::MessageParser<Actor_Test1_Ntt> _parser = new pb::MessageParser<Actor_Test1_Ntt>(() => (Actor_Test1_Ntt)MessagePool.Instance.Fetch(typeof(Actor_Test1_Ntt)));
    public static pb::MessageParser<Actor_Test1_Ntt> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private long actorId_;
    public long ActorId {
      get { return actorId_; }
      set {
        actorId_ = value;
      }
    }

    private string message1_ = "";
    public string Message1 {
      get { return message1_; }
      set {
        message1_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Message1.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Message1);
      }
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (ActorId != 0L) {
        output.WriteRawTag(240, 5);
        output.WriteInt64(ActorId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (ActorId != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(ActorId);
      }
      if (Message1.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Message1);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      message1_ = "";
      rpcId_ = 0;
      actorId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Message1 = input.ReadString();
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 752: {
            ActorId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 心跳包
  /// </summary>
  public partial class PingRequest : pb::IMessage {
    private static readonly pb::MessageParser<PingRequest> _parser = new pb::MessageParser<PingRequest>(() => (PingRequest)MessagePool.Instance.Fetch(typeof(PingRequest)));
    public static pb::MessageParser<PingRequest> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      rpcId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public partial class PingResponse : pb::IMessage {
    private static readonly pb::MessageParser<PingResponse> _parser = new pb::MessageParser<PingResponse>(() => (PingResponse)MessagePool.Instance.Fetch(typeof(PingResponse)));
    public static pb::MessageParser<PingResponse> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private int error_;
    public int Error {
      get { return error_; }
      set {
        error_ = value;
      }
    }

    private string message_ = "";
    public string Message {
      get { return message_; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (Error != 0) {
        output.WriteRawTag(216, 5);
        output.WriteInt32(Error);
      }
      if (Message.Length != 0) {
        output.WriteRawTag(226, 5);
        output.WriteString(Message);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (Error != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Error);
      }
      if (Message.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Message);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      rpcId_ = 0;
      error_ = 0;
      message_ = "";
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 728: {
            Error = input.ReadInt32();
            break;
          }
          case 738: {
            Message = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public partial class C2R_Login : pb::IMessage {
    private static readonly pb::MessageParser<C2R_Login> _parser = new pb::MessageParser<C2R_Login>(() => (C2R_Login)MessagePool.Instance.Fetch(typeof(C2R_Login)));
    public static pb::MessageParser<C2R_Login> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private string account_ = "";
    public string Account {
      get { return account_; }
      set {
        account_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private string password_ = "";
    public string Password {
      get { return password_; }
      set {
        password_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Account.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Account);
      }
      if (Password.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Password);
      }
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (Account.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Account);
      }
      if (Password.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Password);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      account_ = "";
      password_ = "";
      rpcId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Account = input.ReadString();
            break;
          }
          case 18: {
            Password = input.ReadString();
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public partial class R2C_Login : pb::IMessage {
    private static readonly pb::MessageParser<R2C_Login> _parser = new pb::MessageParser<R2C_Login>(() => (R2C_Login)MessagePool.Instance.Fetch(typeof(R2C_Login)));
    public static pb::MessageParser<R2C_Login> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private int error_;
    public int Error {
      get { return error_; }
      set {
        error_ = value;
      }
    }

    private string message_ = "";
    public string Message {
      get { return message_; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private string address_ = "";
    public string Address {
      get { return address_; }
      set {
        address_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private long key_;
    public long Key {
      get { return key_; }
      set {
        key_ = value;
      }
    }

    private long userId_;
    public long UserId {
      get { return userId_; }
      set {
        userId_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Address.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Address);
      }
      if (Key != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(Key);
      }
      if (UserId != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(UserId);
      }
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (Error != 0) {
        output.WriteRawTag(216, 5);
        output.WriteInt32(Error);
      }
      if (Message.Length != 0) {
        output.WriteRawTag(226, 5);
        output.WriteString(Message);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (Error != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Error);
      }
      if (Message.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Message);
      }
      if (Address.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Address);
      }
      if (Key != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Key);
      }
      if (UserId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(UserId);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      address_ = "";
      key_ = 0;
      userId_ = 0;
      rpcId_ = 0;
      error_ = 0;
      message_ = "";
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Address = input.ReadString();
            break;
          }
          case 16: {
            Key = input.ReadInt64();
            break;
          }
          case 24: {
            UserId = input.ReadInt64();
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 728: {
            Error = input.ReadInt32();
            break;
          }
          case 738: {
            Message = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public partial class C2G_LoginGate : pb::IMessage {
    private static readonly pb::MessageParser<C2G_LoginGate> _parser = new pb::MessageParser<C2G_LoginGate>(() => (C2G_LoginGate)MessagePool.Instance.Fetch(typeof(C2G_LoginGate)));
    public static pb::MessageParser<C2G_LoginGate> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private long key_;
    public long Key {
      get { return key_; }
      set {
        key_ = value;
      }
    }

    private long userId_;
    public long UserId {
      get { return userId_; }
      set {
        userId_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Key != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(Key);
      }
      if (UserId != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(UserId);
      }
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (Key != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Key);
      }
      if (UserId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(UserId);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      key_ = 0;
      userId_ = 0;
      rpcId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Key = input.ReadInt64();
            break;
          }
          case 16: {
            UserId = input.ReadInt64();
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public partial class G2C_LoginGate : pb::IMessage {
    private static readonly pb::MessageParser<G2C_LoginGate> _parser = new pb::MessageParser<G2C_LoginGate>(() => (G2C_LoginGate)MessagePool.Instance.Fetch(typeof(G2C_LoginGate)));
    public static pb::MessageParser<G2C_LoginGate> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private int error_;
    public int Error {
      get { return error_; }
      set {
        error_ = value;
      }
    }

    private string message_ = "";
    public string Message {
      get { return message_; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (Error != 0) {
        output.WriteRawTag(216, 5);
        output.WriteInt32(Error);
      }
      if (Message.Length != 0) {
        output.WriteRawTag(226, 5);
        output.WriteString(Message);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (Error != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Error);
      }
      if (Message.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Message);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      rpcId_ = 0;
      error_ = 0;
      message_ = "";
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 728: {
            Error = input.ReadInt32();
            break;
          }
          case 738: {
            Message = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public partial class UserInfo : pb::IMessage {
    private static readonly pb::MessageParser<UserInfo> _parser = new pb::MessageParser<UserInfo>(() => (UserInfo)MessagePool.Instance.Fetch(typeof(UserInfo)));
    public static pb::MessageParser<UserInfo> Parser { get { return _parser; } }

    private string account_ = "";
    public string Account {
      get { return account_; }
      set {
        account_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private int playerId_;
    public int PlayerId {
      get { return playerId_; }
      set {
        playerId_ = value;
      }
    }

    private string nickname_ = "";
    public string Nickname {
      get { return nickname_; }
      set {
        nickname_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private int headId_;
    public int HeadId {
      get { return headId_; }
      set {
        headId_ = value;
      }
    }

    private float gold_;
    public float Gold {
      get { return gold_; }
      set {
        gold_ = value;
      }
    }

    private int gender_;
    public int Gender {
      get { return gender_; }
      set {
        gender_ = value;
      }
    }

    private float score_;
    public float Score {
      get { return score_; }
      set {
        score_ = value;
      }
    }

    private bool isTourist_;
    public bool IsTourist {
      get { return isTourist_; }
      set {
        isTourist_ = value;
      }
    }

    private long phoneNumber_;
    public long PhoneNumber {
      get { return phoneNumber_; }
      set {
        phoneNumber_ = value;
      }
    }

    private string bankAccount_ = "";
    public string BankAccount {
      get { return bankAccount_; }
      set {
        bankAccount_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private string bankNumber_ = "";
    public string BankNumber {
      get { return bankNumber_; }
      set {
        bankNumber_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Account.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Account);
      }
      if (PlayerId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(PlayerId);
      }
      if (Nickname.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Nickname);
      }
      if (HeadId != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(HeadId);
      }
      if (Gold != 0F) {
        output.WriteRawTag(45);
        output.WriteFloat(Gold);
      }
      if (Gender != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(Gender);
      }
      if (Score != 0F) {
        output.WriteRawTag(61);
        output.WriteFloat(Score);
      }
      if (IsTourist != false) {
        output.WriteRawTag(64);
        output.WriteBool(IsTourist);
      }
      if (PhoneNumber != 0L) {
        output.WriteRawTag(72);
        output.WriteInt64(PhoneNumber);
      }
      if (BankAccount.Length != 0) {
        output.WriteRawTag(82);
        output.WriteString(BankAccount);
      }
      if (BankNumber.Length != 0) {
        output.WriteRawTag(90);
        output.WriteString(BankNumber);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (Account.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Account);
      }
      if (PlayerId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PlayerId);
      }
      if (Nickname.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Nickname);
      }
      if (HeadId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(HeadId);
      }
      if (Gold != 0F) {
        size += 1 + 4;
      }
      if (Gender != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Gender);
      }
      if (Score != 0F) {
        size += 1 + 4;
      }
      if (IsTourist != false) {
        size += 1 + 1;
      }
      if (PhoneNumber != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(PhoneNumber);
      }
      if (BankAccount.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(BankAccount);
      }
      if (BankNumber.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(BankNumber);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      account_ = "";
      playerId_ = 0;
      nickname_ = "";
      headId_ = 0;
      gold_ = 0f;
      gender_ = 0;
      score_ = 0f;
      isTourist_ = false;
      phoneNumber_ = 0;
      bankAccount_ = "";
      bankNumber_ = "";
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Account = input.ReadString();
            break;
          }
          case 16: {
            PlayerId = input.ReadInt32();
            break;
          }
          case 26: {
            Nickname = input.ReadString();
            break;
          }
          case 32: {
            HeadId = input.ReadInt32();
            break;
          }
          case 45: {
            Gold = input.ReadFloat();
            break;
          }
          case 48: {
            Gender = input.ReadInt32();
            break;
          }
          case 61: {
            Score = input.ReadFloat();
            break;
          }
          case 64: {
            IsTourist = input.ReadBool();
            break;
          }
          case 72: {
            PhoneNumber = input.ReadInt64();
            break;
          }
          case 82: {
            BankAccount = input.ReadString();
            break;
          }
          case 90: {
            BankNumber = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public partial class C2G_MobileVeirfyCode_Req : pb::IMessage {
    private static readonly pb::MessageParser<C2G_MobileVeirfyCode_Req> _parser = new pb::MessageParser<C2G_MobileVeirfyCode_Req>(() => (C2G_MobileVeirfyCode_Req)MessagePool.Instance.Fetch(typeof(C2G_MobileVeirfyCode_Req)));
    public static pb::MessageParser<C2G_MobileVeirfyCode_Req> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private string mobile_ = "";
    public string Mobile {
      get { return mobile_; }
      set {
        mobile_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Mobile.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Mobile);
      }
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (Mobile.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Mobile);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      mobile_ = "";
      rpcId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Mobile = input.ReadString();
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public partial class G2C_MobileVeirfyCode_Res : pb::IMessage {
    private static readonly pb::MessageParser<G2C_MobileVeirfyCode_Res> _parser = new pb::MessageParser<G2C_MobileVeirfyCode_Res>(() => (G2C_MobileVeirfyCode_Res)MessagePool.Instance.Fetch(typeof(G2C_MobileVeirfyCode_Res)));
    public static pb::MessageParser<G2C_MobileVeirfyCode_Res> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private int error_;
    public int Error {
      get { return error_; }
      set {
        error_ = value;
      }
    }

    private string message_ = "";
    public string Message {
      get { return message_; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private string mobile_ = "";
    public string Mobile {
      get { return mobile_; }
      set {
        mobile_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private string verifyCode_ = "";
    public string VerifyCode {
      get { return verifyCode_; }
      set {
        verifyCode_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Mobile.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Mobile);
      }
      if (VerifyCode.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(VerifyCode);
      }
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (Error != 0) {
        output.WriteRawTag(216, 5);
        output.WriteInt32(Error);
      }
      if (Message.Length != 0) {
        output.WriteRawTag(226, 5);
        output.WriteString(Message);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (Error != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Error);
      }
      if (Message.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Message);
      }
      if (Mobile.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Mobile);
      }
      if (VerifyCode.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(VerifyCode);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      mobile_ = "";
      verifyCode_ = "";
      rpcId_ = 0;
      error_ = 0;
      message_ = "";
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Mobile = input.ReadString();
            break;
          }
          case 18: {
            VerifyCode = input.ReadString();
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 728: {
            Error = input.ReadInt32();
            break;
          }
          case 738: {
            Message = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public partial class C2G_MobileLogin_Req : pb::IMessage {
    private static readonly pb::MessageParser<C2G_MobileLogin_Req> _parser = new pb::MessageParser<C2G_MobileLogin_Req>(() => (C2G_MobileLogin_Req)MessagePool.Instance.Fetch(typeof(C2G_MobileLogin_Req)));
    public static pb::MessageParser<C2G_MobileLogin_Req> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private string mobile_ = "";
    public string Mobile {
      get { return mobile_; }
      set {
        mobile_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private string verifyCode_ = "";
    public string VerifyCode {
      get { return verifyCode_; }
      set {
        verifyCode_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Mobile.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Mobile);
      }
      if (VerifyCode.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(VerifyCode);
      }
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (Mobile.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Mobile);
      }
      if (VerifyCode.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(VerifyCode);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      mobile_ = "";
      verifyCode_ = "";
      rpcId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Mobile = input.ReadString();
            break;
          }
          case 18: {
            VerifyCode = input.ReadString();
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public partial class G2C_MobileLogin_Res : pb::IMessage {
    private static readonly pb::MessageParser<G2C_MobileLogin_Res> _parser = new pb::MessageParser<G2C_MobileLogin_Res>(() => (G2C_MobileLogin_Res)MessagePool.Instance.Fetch(typeof(G2C_MobileLogin_Res)));
    public static pb::MessageParser<G2C_MobileLogin_Res> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private int error_;
    public int Error {
      get { return error_; }
      set {
        error_ = value;
      }
    }

    private string message_ = "";
    public string Message {
      get { return message_; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private string account_ = "";
    public string Account {
      get { return account_; }
      set {
        account_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private string token_ = "";
    public string Token {
      get { return token_; }
      set {
        token_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private string address_ = "";
    public string Address {
      get { return address_; }
      set {
        address_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private long key_;
    public long Key {
      get { return key_; }
      set {
        key_ = value;
      }
    }

    private long userId_;
    public long UserId {
      get { return userId_; }
      set {
        userId_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Account.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Account);
      }
      if (Token.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Token);
      }
      if (Address.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Address);
      }
      if (Key != 0L) {
        output.WriteRawTag(32);
        output.WriteInt64(Key);
      }
      if (UserId != 0L) {
        output.WriteRawTag(40);
        output.WriteInt64(UserId);
      }
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (Error != 0) {
        output.WriteRawTag(216, 5);
        output.WriteInt32(Error);
      }
      if (Message.Length != 0) {
        output.WriteRawTag(226, 5);
        output.WriteString(Message);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (Error != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Error);
      }
      if (Message.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Message);
      }
      if (Account.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Account);
      }
      if (Token.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Token);
      }
      if (Address.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Address);
      }
      if (Key != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Key);
      }
      if (UserId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(UserId);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      account_ = "";
      token_ = "";
      address_ = "";
      key_ = 0;
      userId_ = 0;
      rpcId_ = 0;
      error_ = 0;
      message_ = "";
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Account = input.ReadString();
            break;
          }
          case 18: {
            Token = input.ReadString();
            break;
          }
          case 26: {
            Address = input.ReadString();
            break;
          }
          case 32: {
            Key = input.ReadInt64();
            break;
          }
          case 40: {
            UserId = input.ReadInt64();
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 728: {
            Error = input.ReadInt32();
            break;
          }
          case 738: {
            Message = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public partial class C2G_TokenLogin_Req : pb::IMessage {
    private static readonly pb::MessageParser<C2G_TokenLogin_Req> _parser = new pb::MessageParser<C2G_TokenLogin_Req>(() => (C2G_TokenLogin_Req)MessagePool.Instance.Fetch(typeof(C2G_TokenLogin_Req)));
    public static pb::MessageParser<C2G_TokenLogin_Req> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private string account_ = "";
    public string Account {
      get { return account_; }
      set {
        account_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private string token_ = "";
    public string Token {
      get { return token_; }
      set {
        token_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Account.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Account);
      }
      if (Token.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Token);
      }
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (Account.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Account);
      }
      if (Token.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Token);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      account_ = "";
      token_ = "";
      rpcId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Account = input.ReadString();
            break;
          }
          case 18: {
            Token = input.ReadString();
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public partial class G2C_TokenLogin_Res : pb::IMessage {
    private static readonly pb::MessageParser<G2C_TokenLogin_Res> _parser = new pb::MessageParser<G2C_TokenLogin_Res>(() => (G2C_TokenLogin_Res)MessagePool.Instance.Fetch(typeof(G2C_TokenLogin_Res)));
    public static pb::MessageParser<G2C_TokenLogin_Res> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private int error_;
    public int Error {
      get { return error_; }
      set {
        error_ = value;
      }
    }

    private string message_ = "";
    public string Message {
      get { return message_; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private string address_ = "";
    public string Address {
      get { return address_; }
      set {
        address_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private long key_;
    public long Key {
      get { return key_; }
      set {
        key_ = value;
      }
    }

    private long userId_;
    public long UserId {
      get { return userId_; }
      set {
        userId_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Address.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Address);
      }
      if (Key != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(Key);
      }
      if (UserId != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(UserId);
      }
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (Error != 0) {
        output.WriteRawTag(216, 5);
        output.WriteInt32(Error);
      }
      if (Message.Length != 0) {
        output.WriteRawTag(226, 5);
        output.WriteString(Message);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (Error != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Error);
      }
      if (Message.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Message);
      }
      if (Address.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Address);
      }
      if (Key != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Key);
      }
      if (UserId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(UserId);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      address_ = "";
      key_ = 0;
      userId_ = 0;
      rpcId_ = 0;
      error_ = 0;
      message_ = "";
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Address = input.ReadString();
            break;
          }
          case 16: {
            Key = input.ReadInt64();
            break;
          }
          case 24: {
            UserId = input.ReadInt64();
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 728: {
            Error = input.ReadInt32();
            break;
          }
          case 738: {
            Message = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public partial class C2R_Register_Req : pb::IMessage {
    private static readonly pb::MessageParser<C2R_Register_Req> _parser = new pb::MessageParser<C2R_Register_Req>(() => (C2R_Register_Req)MessagePool.Instance.Fetch(typeof(C2R_Register_Req)));
    public static pb::MessageParser<C2R_Register_Req> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private string account_ = "";
    public string Account {
      get { return account_; }
      set {
        account_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private string password_ = "";
    public string Password {
      get { return password_; }
      set {
        password_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Account.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Account);
      }
      if (Password.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Password);
      }
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (Account.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Account);
      }
      if (Password.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Password);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      account_ = "";
      password_ = "";
      rpcId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Account = input.ReadString();
            break;
          }
          case 18: {
            Password = input.ReadString();
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public partial class R2C_Register_Res : pb::IMessage {
    private static readonly pb::MessageParser<R2C_Register_Res> _parser = new pb::MessageParser<R2C_Register_Res>(() => (R2C_Register_Res)MessagePool.Instance.Fetch(typeof(R2C_Register_Res)));
    public static pb::MessageParser<R2C_Register_Res> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private int error_;
    public int Error {
      get { return error_; }
      set {
        error_ = value;
      }
    }

    private string message_ = "";
    public string Message {
      get { return message_; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (Error != 0) {
        output.WriteRawTag(216, 5);
        output.WriteInt32(Error);
      }
      if (Message.Length != 0) {
        output.WriteRawTag(226, 5);
        output.WriteString(Message);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (Error != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Error);
      }
      if (Message.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Message);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      rpcId_ = 0;
      error_ = 0;
      message_ = "";
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 728: {
            Error = input.ReadInt32();
            break;
          }
          case 738: {
            Message = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public partial class C2G_GetUserInfo_Req : pb::IMessage {
    private static readonly pb::MessageParser<C2G_GetUserInfo_Req> _parser = new pb::MessageParser<C2G_GetUserInfo_Req>(() => (C2G_GetUserInfo_Req)MessagePool.Instance.Fetch(typeof(C2G_GetUserInfo_Req)));
    public static pb::MessageParser<C2G_GetUserInfo_Req> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private long userId_;
    public long UserId {
      get { return userId_; }
      set {
        userId_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (UserId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(UserId);
      }
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (UserId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(UserId);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      userId_ = 0;
      rpcId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            UserId = input.ReadInt64();
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public partial class G2C_GetUserInfo_Res : pb::IMessage {
    private static readonly pb::MessageParser<G2C_GetUserInfo_Res> _parser = new pb::MessageParser<G2C_GetUserInfo_Res>(() => (G2C_GetUserInfo_Res)MessagePool.Instance.Fetch(typeof(G2C_GetUserInfo_Res)));
    public static pb::MessageParser<G2C_GetUserInfo_Res> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private int error_;
    public int Error {
      get { return error_; }
      set {
        error_ = value;
      }
    }

    private string message_ = "";
    public string Message {
      get { return message_; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private global::ETHotfix.UserInfo userInfo_;
    public global::ETHotfix.UserInfo UserInfo {
      get { return userInfo_; }
      set {
        userInfo_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (userInfo_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(UserInfo);
      }
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (Error != 0) {
        output.WriteRawTag(216, 5);
        output.WriteInt32(Error);
      }
      if (Message.Length != 0) {
        output.WriteRawTag(226, 5);
        output.WriteString(Message);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (Error != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Error);
      }
      if (Message.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Message);
      }
      if (userInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(UserInfo);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      if (userInfo_ != null) MessagePool.Instance.Recycle(userInfo_); userInfo_ = null;
      rpcId_ = 0;
      error_ = 0;
      message_ = "";
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (userInfo_ == null) {
              userInfo_ = new global::ETHotfix.UserInfo();
            }
            input.ReadMessage(userInfo_);
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 728: {
            Error = input.ReadInt32();
            break;
          }
          case 738: {
            Message = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public partial class C2G_ChangerUserInfo_Req : pb::IMessage {
    private static readonly pb::MessageParser<C2G_ChangerUserInfo_Req> _parser = new pb::MessageParser<C2G_ChangerUserInfo_Req>(() => (C2G_ChangerUserInfo_Req)MessagePool.Instance.Fetch(typeof(C2G_ChangerUserInfo_Req)));
    public static pb::MessageParser<C2G_ChangerUserInfo_Req> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private long userId_;
    public long UserId {
      get { return userId_; }
      set {
        userId_ = value;
      }
    }

    private int type_;
    public int Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    private int headId_;
    public int HeadId {
      get { return headId_; }
      set {
        headId_ = value;
      }
    }

    private int gender_;
    public int Gender {
      get { return gender_; }
      set {
        gender_ = value;
      }
    }

    private string nickName_ = "";
    public string NickName {
      get { return nickName_; }
      set {
        nickName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (UserId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(UserId);
      }
      if (Type != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Type);
      }
      if (HeadId != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(HeadId);
      }
      if (Gender != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Gender);
      }
      if (NickName.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(NickName);
      }
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (UserId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(UserId);
      }
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Type);
      }
      if (HeadId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(HeadId);
      }
      if (Gender != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Gender);
      }
      if (NickName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(NickName);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      userId_ = 0;
      type_ = 0;
      headId_ = 0;
      gender_ = 0;
      nickName_ = "";
      rpcId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            UserId = input.ReadInt64();
            break;
          }
          case 16: {
            Type = input.ReadInt32();
            break;
          }
          case 24: {
            HeadId = input.ReadInt32();
            break;
          }
          case 32: {
            Gender = input.ReadInt32();
            break;
          }
          case 42: {
            NickName = input.ReadString();
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public partial class G2C_ChangerUserInfo_Res : pb::IMessage {
    private static readonly pb::MessageParser<G2C_ChangerUserInfo_Res> _parser = new pb::MessageParser<G2C_ChangerUserInfo_Res>(() => (G2C_ChangerUserInfo_Res)MessagePool.Instance.Fetch(typeof(G2C_ChangerUserInfo_Res)));
    public static pb::MessageParser<G2C_ChangerUserInfo_Res> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private int error_;
    public int Error {
      get { return error_; }
      set {
        error_ = value;
      }
    }

    private string message_ = "";
    public string Message {
      get { return message_; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (Error != 0) {
        output.WriteRawTag(216, 5);
        output.WriteInt32(Error);
      }
      if (Message.Length != 0) {
        output.WriteRawTag(226, 5);
        output.WriteString(Message);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (Error != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Error);
      }
      if (Message.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Message);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      rpcId_ = 0;
      error_ = 0;
      message_ = "";
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 728: {
            Error = input.ReadInt32();
            break;
          }
          case 738: {
            Message = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public partial class GameInfo : pb::IMessage {
    private static readonly pb::MessageParser<GameInfo> _parser = new pb::MessageParser<GameInfo>(() => (GameInfo)MessagePool.Instance.Fetch(typeof(GameInfo)));
    public static pb::MessageParser<GameInfo> Parser { get { return _parser; } }

    private int gameId_;
    public int GameId {
      get { return gameId_; }
      set {
        gameId_ = value;
      }
    }

    private string gameName_ = "";
    public string GameName {
      get { return gameName_; }
      set {
        gameName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (GameId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(GameId);
      }
      if (GameName.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(GameName);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (GameId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(GameId);
      }
      if (GameName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(GameName);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      gameId_ = 0;
      gameName_ = "";
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            GameId = input.ReadInt32();
            break;
          }
          case 18: {
            GameName = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public partial class C2G_GetGameList_Req : pb::IMessage {
    private static readonly pb::MessageParser<C2G_GetGameList_Req> _parser = new pb::MessageParser<C2G_GetGameList_Req>(() => (C2G_GetGameList_Req)MessagePool.Instance.Fetch(typeof(C2G_GetGameList_Req)));
    public static pb::MessageParser<C2G_GetGameList_Req> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      rpcId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public partial class G2C_GetGameList_Res : pb::IMessage {
    private static readonly pb::MessageParser<G2C_GetGameList_Res> _parser = new pb::MessageParser<G2C_GetGameList_Res>(() => (G2C_GetGameList_Res)MessagePool.Instance.Fetch(typeof(G2C_GetGameList_Res)));
    public static pb::MessageParser<G2C_GetGameList_Res> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private int error_;
    public int Error {
      get { return error_; }
      set {
        error_ = value;
      }
    }

    private string message_ = "";
    public string Message {
      get { return message_; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private static readonly pb::FieldCodec<global::ETHotfix.GameInfo> _repeated_gameInfo_codec
        = pb::FieldCodec.ForMessage(10, global::ETHotfix.GameInfo.Parser);
    private pbc::RepeatedField<global::ETHotfix.GameInfo> gameInfo_ = new pbc::RepeatedField<global::ETHotfix.GameInfo>();
    public pbc::RepeatedField<global::ETHotfix.GameInfo> GameInfo {
      get { return gameInfo_; }
      set { gameInfo_ = value; }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      gameInfo_.WriteTo(output, _repeated_gameInfo_codec);
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (Error != 0) {
        output.WriteRawTag(216, 5);
        output.WriteInt32(Error);
      }
      if (Message.Length != 0) {
        output.WriteRawTag(226, 5);
        output.WriteString(Message);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (Error != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Error);
      }
      if (Message.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Message);
      }
      size += gameInfo_.CalculateSize(_repeated_gameInfo_codec);
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      for (int i = 0; i < gameInfo_.Count; i++) { MessagePool.Instance.Recycle(gameInfo_[i]); }
      gameInfo_.Clear();
      rpcId_ = 0;
      error_ = 0;
      message_ = "";
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            gameInfo_.AddEntriesFrom(input, _repeated_gameInfo_codec);
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 728: {
            Error = input.ReadInt32();
            break;
          }
          case 738: {
            Message = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public partial class AreaInfo : pb::IMessage {
    private static readonly pb::MessageParser<AreaInfo> _parser = new pb::MessageParser<AreaInfo>(() => (AreaInfo)MessagePool.Instance.Fetch(typeof(AreaInfo)));
    public static pb::MessageParser<AreaInfo> Parser { get { return _parser; } }

    private int gameId_;
    public int GameId {
      get { return gameId_; }
      set {
        gameId_ = value;
      }
    }

    private int areaId_;
    public int AreaId {
      get { return areaId_; }
      set {
        areaId_ = value;
      }
    }

    private int score_;
    public int Score {
      get { return score_; }
      set {
        score_ = value;
      }
    }

    private string areaType_ = "";
    public string AreaType {
      get { return areaType_; }
      set {
        areaType_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (GameId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(GameId);
      }
      if (AreaId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(AreaId);
      }
      if (Score != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Score);
      }
      if (AreaType.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(AreaType);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (GameId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(GameId);
      }
      if (AreaId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(AreaId);
      }
      if (Score != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Score);
      }
      if (AreaType.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(AreaType);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      gameId_ = 0;
      areaId_ = 0;
      score_ = 0;
      areaType_ = "";
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            GameId = input.ReadInt32();
            break;
          }
          case 16: {
            AreaId = input.ReadInt32();
            break;
          }
          case 24: {
            Score = input.ReadInt32();
            break;
          }
          case 34: {
            AreaType = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public partial class C2G_GetAreaList_Req : pb::IMessage {
    private static readonly pb::MessageParser<C2G_GetAreaList_Req> _parser = new pb::MessageParser<C2G_GetAreaList_Req>(() => (C2G_GetAreaList_Req)MessagePool.Instance.Fetch(typeof(C2G_GetAreaList_Req)));
    public static pb::MessageParser<C2G_GetAreaList_Req> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private int gameId_;
    public int GameId {
      get { return gameId_; }
      set {
        gameId_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (GameId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(GameId);
      }
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (GameId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(GameId);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      gameId_ = 0;
      rpcId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            GameId = input.ReadInt32();
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public partial class G2C_GetAreaList_Res : pb::IMessage {
    private static readonly pb::MessageParser<G2C_GetAreaList_Res> _parser = new pb::MessageParser<G2C_GetAreaList_Res>(() => (G2C_GetAreaList_Res)MessagePool.Instance.Fetch(typeof(G2C_GetAreaList_Res)));
    public static pb::MessageParser<G2C_GetAreaList_Res> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private int error_;
    public int Error {
      get { return error_; }
      set {
        error_ = value;
      }
    }

    private string message_ = "";
    public string Message {
      get { return message_; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private static readonly pb::FieldCodec<global::ETHotfix.AreaInfo> _repeated_areaInfo_codec
        = pb::FieldCodec.ForMessage(10, global::ETHotfix.AreaInfo.Parser);
    private pbc::RepeatedField<global::ETHotfix.AreaInfo> areaInfo_ = new pbc::RepeatedField<global::ETHotfix.AreaInfo>();
    public pbc::RepeatedField<global::ETHotfix.AreaInfo> AreaInfo {
      get { return areaInfo_; }
      set { areaInfo_ = value; }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      areaInfo_.WriteTo(output, _repeated_areaInfo_codec);
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (Error != 0) {
        output.WriteRawTag(216, 5);
        output.WriteInt32(Error);
      }
      if (Message.Length != 0) {
        output.WriteRawTag(226, 5);
        output.WriteString(Message);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (Error != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Error);
      }
      if (Message.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Message);
      }
      size += areaInfo_.CalculateSize(_repeated_areaInfo_codec);
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      for (int i = 0; i < areaInfo_.Count; i++) { MessagePool.Instance.Recycle(areaInfo_[i]); }
      areaInfo_.Clear();
      rpcId_ = 0;
      error_ = 0;
      message_ = "";
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            areaInfo_.AddEntriesFrom(input, _repeated_areaInfo_codec);
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 728: {
            Error = input.ReadInt32();
            break;
          }
          case 738: {
            Message = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public partial class RoomListInfo : pb::IMessage {
    private static readonly pb::MessageParser<RoomListInfo> _parser = new pb::MessageParser<RoomListInfo>(() => (RoomListInfo)MessagePool.Instance.Fetch(typeof(RoomListInfo)));
    public static pb::MessageParser<RoomListInfo> Parser { get { return _parser; } }

    private int gameId_;
    public int GameId {
      get { return gameId_; }
      set {
        gameId_ = value;
      }
    }

    private int areaId_;
    public int AreaId {
      get { return areaId_; }
      set {
        areaId_ = value;
      }
    }

    private int roomId_;
    public int RoomId {
      get { return roomId_; }
      set {
        roomId_ = value;
      }
    }

    private int diFen_;
    public int DiFen {
      get { return diFen_; }
      set {
        diFen_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (GameId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(GameId);
      }
      if (AreaId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(AreaId);
      }
      if (RoomId != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(RoomId);
      }
      if (DiFen != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(DiFen);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (GameId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(GameId);
      }
      if (AreaId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(AreaId);
      }
      if (RoomId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RoomId);
      }
      if (DiFen != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(DiFen);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      gameId_ = 0;
      areaId_ = 0;
      roomId_ = 0;
      diFen_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            GameId = input.ReadInt32();
            break;
          }
          case 16: {
            AreaId = input.ReadInt32();
            break;
          }
          case 24: {
            RoomId = input.ReadInt32();
            break;
          }
          case 32: {
            DiFen = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public partial class C2G_GetRoomList_Req : pb::IMessage {
    private static readonly pb::MessageParser<C2G_GetRoomList_Req> _parser = new pb::MessageParser<C2G_GetRoomList_Req>(() => (C2G_GetRoomList_Req)MessagePool.Instance.Fetch(typeof(C2G_GetRoomList_Req)));
    public static pb::MessageParser<C2G_GetRoomList_Req> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private int gameId_;
    public int GameId {
      get { return gameId_; }
      set {
        gameId_ = value;
      }
    }

    private int areaId_;
    public int AreaId {
      get { return areaId_; }
      set {
        areaId_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (GameId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(GameId);
      }
      if (AreaId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(AreaId);
      }
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (GameId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(GameId);
      }
      if (AreaId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(AreaId);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      gameId_ = 0;
      areaId_ = 0;
      rpcId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            GameId = input.ReadInt32();
            break;
          }
          case 16: {
            AreaId = input.ReadInt32();
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public partial class G2C_GetRoomLis_Res : pb::IMessage {
    private static readonly pb::MessageParser<G2C_GetRoomLis_Res> _parser = new pb::MessageParser<G2C_GetRoomLis_Res>(() => (G2C_GetRoomLis_Res)MessagePool.Instance.Fetch(typeof(G2C_GetRoomLis_Res)));
    public static pb::MessageParser<G2C_GetRoomLis_Res> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private int error_;
    public int Error {
      get { return error_; }
      set {
        error_ = value;
      }
    }

    private string message_ = "";
    public string Message {
      get { return message_; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private static readonly pb::FieldCodec<global::ETHotfix.RoomListInfo> _repeated_roomList_codec
        = pb::FieldCodec.ForMessage(10, global::ETHotfix.RoomListInfo.Parser);
    private pbc::RepeatedField<global::ETHotfix.RoomListInfo> roomList_ = new pbc::RepeatedField<global::ETHotfix.RoomListInfo>();
    public pbc::RepeatedField<global::ETHotfix.RoomListInfo> RoomList {
      get { return roomList_; }
      set { roomList_ = value; }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      roomList_.WriteTo(output, _repeated_roomList_codec);
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (Error != 0) {
        output.WriteRawTag(216, 5);
        output.WriteInt32(Error);
      }
      if (Message.Length != 0) {
        output.WriteRawTag(226, 5);
        output.WriteString(Message);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (Error != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Error);
      }
      if (Message.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Message);
      }
      size += roomList_.CalculateSize(_repeated_roomList_codec);
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      for (int i = 0; i < roomList_.Count; i++) { MessagePool.Instance.Recycle(roomList_[i]); }
      roomList_.Clear();
      rpcId_ = 0;
      error_ = 0;
      message_ = "";
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            roomList_.AddEntriesFrom(input, _repeated_roomList_codec);
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 728: {
            Error = input.ReadInt32();
            break;
          }
          case 738: {
            Message = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public partial class PlayerData : pb::IMessage {
    private static readonly pb::MessageParser<PlayerData> _parser = new pb::MessageParser<PlayerData>(() => (PlayerData)MessagePool.Instance.Fetch(typeof(PlayerData)));
    public static pb::MessageParser<PlayerData> Parser { get { return _parser; } }

    private int chairId_;
    public int ChairId {
      get { return chairId_; }
      set {
        chairId_ = value;
      }
    }

    private long userId_;
    public long UserId {
      get { return userId_; }
      set {
        userId_ = value;
      }
    }

    private string nickName_ = "";
    public string NickName {
      get { return nickName_; }
      set {
        nickName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private int gender_;
    public int Gender {
      get { return gender_; }
      set {
        gender_ = value;
      }
    }

    private float gold_;
    public float Gold {
      get { return gold_; }
      set {
        gold_ = value;
      }
    }

    private bool robot_;
    public bool Robot {
      get { return robot_; }
      set {
        robot_ = value;
      }
    }

    private int headId_;
    public int HeadId {
      get { return headId_; }
      set {
        headId_ = value;
      }
    }

    private bool isWin_;
    public bool IsWin {
      get { return isWin_; }
      set {
        isWin_ = value;
      }
    }

    private float score_;
    public float Score {
      get { return score_; }
      set {
        score_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (ChairId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ChairId);
      }
      if (UserId != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(UserId);
      }
      if (NickName.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(NickName);
      }
      if (Gender != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Gender);
      }
      if (Gold != 0F) {
        output.WriteRawTag(45);
        output.WriteFloat(Gold);
      }
      if (Robot != false) {
        output.WriteRawTag(48);
        output.WriteBool(Robot);
      }
      if (HeadId != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(HeadId);
      }
      if (IsWin != false) {
        output.WriteRawTag(64);
        output.WriteBool(IsWin);
      }
      if (Score != 0F) {
        output.WriteRawTag(77);
        output.WriteFloat(Score);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (ChairId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ChairId);
      }
      if (UserId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(UserId);
      }
      if (NickName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(NickName);
      }
      if (Gender != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Gender);
      }
      if (Gold != 0F) {
        size += 1 + 4;
      }
      if (Robot != false) {
        size += 1 + 1;
      }
      if (HeadId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(HeadId);
      }
      if (IsWin != false) {
        size += 1 + 1;
      }
      if (Score != 0F) {
        size += 1 + 4;
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      chairId_ = 0;
      userId_ = 0;
      nickName_ = "";
      gender_ = 0;
      gold_ = 0f;
      robot_ = false;
      headId_ = 0;
      isWin_ = false;
      score_ = 0f;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ChairId = input.ReadInt32();
            break;
          }
          case 16: {
            UserId = input.ReadInt64();
            break;
          }
          case 26: {
            NickName = input.ReadString();
            break;
          }
          case 32: {
            Gender = input.ReadInt32();
            break;
          }
          case 45: {
            Gold = input.ReadFloat();
            break;
          }
          case 48: {
            Robot = input.ReadBool();
            break;
          }
          case 56: {
            HeadId = input.ReadInt32();
            break;
          }
          case 64: {
            IsWin = input.ReadBool();
            break;
          }
          case 77: {
            Score = input.ReadFloat();
            break;
          }
        }
      }
    }

  }

  public partial class RoomData : pb::IMessage {
    private static readonly pb::MessageParser<RoomData> _parser = new pb::MessageParser<RoomData>(() => (RoomData)MessagePool.Instance.Fetch(typeof(RoomData)));
    public static pb::MessageParser<RoomData> Parser { get { return _parser; } }

    private int gameState_;
    public int GameState {
      get { return gameState_; }
      set {
        gameState_ = value;
      }
    }

    private static readonly pb::FieldCodec<global::ETHotfix.PlayerData> _repeated_playerData_codec
        = pb::FieldCodec.ForMessage(18, global::ETHotfix.PlayerData.Parser);
    private pbc::RepeatedField<global::ETHotfix.PlayerData> playerData_ = new pbc::RepeatedField<global::ETHotfix.PlayerData>();
    public pbc::RepeatedField<global::ETHotfix.PlayerData> PlayerData {
      get { return playerData_; }
      set { playerData_ = value; }
    }

    private static readonly pb::FieldCodec<long> _repeated_seatPlayer_codec
        = pb::FieldCodec.ForInt64(26);
    private pbc::RepeatedField<long> seatPlayer_ = new pbc::RepeatedField<long>();
    public pbc::RepeatedField<long> SeatPlayer {
      get { return seatPlayer_; }
      set { seatPlayer_ = value; }
    }

    private int leftTime_;
    public int LeftTime {
      get { return leftTime_; }
      set {
        leftTime_ = value;
      }
    }

    private static readonly pb::FieldCodec<global::ETHotfix.Card> _repeated_card_codec
        = pb::FieldCodec.ForMessage(42, global::ETHotfix.Card.Parser);
    private pbc::RepeatedField<global::ETHotfix.Card> card_ = new pbc::RepeatedField<global::ETHotfix.Card>();
    public pbc::RepeatedField<global::ETHotfix.Card> Card {
      get { return card_; }
      set { card_ = value; }
    }

    private global::ETHotfix.DDZRoomData ddzRoomData_;
    public global::ETHotfix.DDZRoomData DdzRoomData {
      get { return ddzRoomData_; }
      set {
        ddzRoomData_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (GameState != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(GameState);
      }
      playerData_.WriteTo(output, _repeated_playerData_codec);
      seatPlayer_.WriteTo(output, _repeated_seatPlayer_codec);
      if (LeftTime != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(LeftTime);
      }
      card_.WriteTo(output, _repeated_card_codec);
      if (ddzRoomData_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(DdzRoomData);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (GameState != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(GameState);
      }
      size += playerData_.CalculateSize(_repeated_playerData_codec);
      size += seatPlayer_.CalculateSize(_repeated_seatPlayer_codec);
      if (LeftTime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(LeftTime);
      }
      size += card_.CalculateSize(_repeated_card_codec);
      if (ddzRoomData_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(DdzRoomData);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      gameState_ = 0;
      for (int i = 0; i < playerData_.Count; i++) { MessagePool.Instance.Recycle(playerData_[i]); }
      playerData_.Clear();
      seatPlayer_.Clear();
      leftTime_ = 0;
      for (int i = 0; i < card_.Count; i++) { MessagePool.Instance.Recycle(card_[i]); }
      card_.Clear();
      if (ddzRoomData_ != null) MessagePool.Instance.Recycle(ddzRoomData_); ddzRoomData_ = null;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            GameState = input.ReadInt32();
            break;
          }
          case 18: {
            playerData_.AddEntriesFrom(input, _repeated_playerData_codec);
            break;
          }
          case 26:
          case 24: {
            seatPlayer_.AddEntriesFrom(input, _repeated_seatPlayer_codec);
            break;
          }
          case 32: {
            LeftTime = input.ReadInt32();
            break;
          }
          case 42: {
            card_.AddEntriesFrom(input, _repeated_card_codec);
            break;
          }
          case 50: {
            if (ddzRoomData_ == null) {
              ddzRoomData_ = new global::ETHotfix.DDZRoomData();
            }
            input.ReadMessage(ddzRoomData_);
            break;
          }
        }
      }
    }

  }

  public partial class C2G_JionRoom_Req : pb::IMessage {
    private static readonly pb::MessageParser<C2G_JionRoom_Req> _parser = new pb::MessageParser<C2G_JionRoom_Req>(() => (C2G_JionRoom_Req)MessagePool.Instance.Fetch(typeof(C2G_JionRoom_Req)));
    public static pb::MessageParser<C2G_JionRoom_Req> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private int gameId_;
    public int GameId {
      get { return gameId_; }
      set {
        gameId_ = value;
      }
    }

    private int areaId_;
    public int AreaId {
      get { return areaId_; }
      set {
        areaId_ = value;
      }
    }

    private int roomId_;
    public int RoomId {
      get { return roomId_; }
      set {
        roomId_ = value;
      }
    }

    private long userId_;
    public long UserId {
      get { return userId_; }
      set {
        userId_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (GameId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(GameId);
      }
      if (AreaId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(AreaId);
      }
      if (RoomId != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(RoomId);
      }
      if (UserId != 0L) {
        output.WriteRawTag(32);
        output.WriteInt64(UserId);
      }
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (GameId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(GameId);
      }
      if (AreaId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(AreaId);
      }
      if (RoomId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RoomId);
      }
      if (UserId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(UserId);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      gameId_ = 0;
      areaId_ = 0;
      roomId_ = 0;
      userId_ = 0;
      rpcId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            GameId = input.ReadInt32();
            break;
          }
          case 16: {
            AreaId = input.ReadInt32();
            break;
          }
          case 24: {
            RoomId = input.ReadInt32();
            break;
          }
          case 32: {
            UserId = input.ReadInt64();
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public partial class G2C_JionRoom_Res : pb::IMessage {
    private static readonly pb::MessageParser<G2C_JionRoom_Res> _parser = new pb::MessageParser<G2C_JionRoom_Res>(() => (G2C_JionRoom_Res)MessagePool.Instance.Fetch(typeof(G2C_JionRoom_Res)));
    public static pb::MessageParser<G2C_JionRoom_Res> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private int error_;
    public int Error {
      get { return error_; }
      set {
        error_ = value;
      }
    }

    private string message_ = "";
    public string Message {
      get { return message_; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private int roomId_;
    public int RoomId {
      get { return roomId_; }
      set {
        roomId_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (RoomId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(RoomId);
      }
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (Error != 0) {
        output.WriteRawTag(216, 5);
        output.WriteInt32(Error);
      }
      if (Message.Length != 0) {
        output.WriteRawTag(226, 5);
        output.WriteString(Message);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (Error != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Error);
      }
      if (Message.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Message);
      }
      if (RoomId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RoomId);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      roomId_ = 0;
      rpcId_ = 0;
      error_ = 0;
      message_ = "";
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            RoomId = input.ReadInt32();
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 728: {
            Error = input.ReadInt32();
            break;
          }
          case 738: {
            Message = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public partial class Actor_JionRoom_Ntt : pb::IMessage {
    private static readonly pb::MessageParser<Actor_JionRoom_Ntt> _parser = new pb::MessageParser<Actor_JionRoom_Ntt>(() => (Actor_JionRoom_Ntt)MessagePool.Instance.Fetch(typeof(Actor_JionRoom_Ntt)));
    public static pb::MessageParser<Actor_JionRoom_Ntt> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private long actorId_;
    public long ActorId {
      get { return actorId_; }
      set {
        actorId_ = value;
      }
    }

    private string message1_ = "";
    public string Message1 {
      get { return message1_; }
      set {
        message1_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private int roomId_;
    public int RoomId {
      get { return roomId_; }
      set {
        roomId_ = value;
      }
    }

    private long userId_;
    public long UserId {
      get { return userId_; }
      set {
        userId_ = value;
      }
    }

    private global::ETHotfix.PlayerData playerData_;
    public global::ETHotfix.PlayerData PlayerData {
      get { return playerData_; }
      set {
        playerData_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Message1.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Message1);
      }
      if (RoomId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(RoomId);
      }
      if (UserId != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(UserId);
      }
      if (playerData_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(PlayerData);
      }
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (ActorId != 0L) {
        output.WriteRawTag(240, 5);
        output.WriteInt64(ActorId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (ActorId != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(ActorId);
      }
      if (Message1.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Message1);
      }
      if (RoomId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RoomId);
      }
      if (UserId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(UserId);
      }
      if (playerData_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(PlayerData);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      message1_ = "";
      roomId_ = 0;
      userId_ = 0;
      if (playerData_ != null) MessagePool.Instance.Recycle(playerData_); playerData_ = null;
      rpcId_ = 0;
      actorId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Message1 = input.ReadString();
            break;
          }
          case 16: {
            RoomId = input.ReadInt32();
            break;
          }
          case 24: {
            UserId = input.ReadInt64();
            break;
          }
          case 34: {
            if (playerData_ == null) {
              playerData_ = new global::ETHotfix.PlayerData();
            }
            input.ReadMessage(playerData_);
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 752: {
            ActorId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public partial class C2G_GetRoomInfo_Req : pb::IMessage {
    private static readonly pb::MessageParser<C2G_GetRoomInfo_Req> _parser = new pb::MessageParser<C2G_GetRoomInfo_Req>(() => (C2G_GetRoomInfo_Req)MessagePool.Instance.Fetch(typeof(C2G_GetRoomInfo_Req)));
    public static pb::MessageParser<C2G_GetRoomInfo_Req> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private int gameId_;
    public int GameId {
      get { return gameId_; }
      set {
        gameId_ = value;
      }
    }

    private int areaId_;
    public int AreaId {
      get { return areaId_; }
      set {
        areaId_ = value;
      }
    }

    private long userId_;
    public long UserId {
      get { return userId_; }
      set {
        userId_ = value;
      }
    }

    private int roomId_;
    public int RoomId {
      get { return roomId_; }
      set {
        roomId_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (GameId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(GameId);
      }
      if (AreaId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(AreaId);
      }
      if (UserId != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(UserId);
      }
      if (RoomId != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(RoomId);
      }
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (GameId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(GameId);
      }
      if (AreaId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(AreaId);
      }
      if (UserId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(UserId);
      }
      if (RoomId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RoomId);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      gameId_ = 0;
      areaId_ = 0;
      userId_ = 0;
      roomId_ = 0;
      rpcId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            GameId = input.ReadInt32();
            break;
          }
          case 16: {
            AreaId = input.ReadInt32();
            break;
          }
          case 24: {
            UserId = input.ReadInt64();
            break;
          }
          case 32: {
            RoomId = input.ReadInt32();
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public partial class G2C_GetRoomInfo_Res : pb::IMessage {
    private static readonly pb::MessageParser<G2C_GetRoomInfo_Res> _parser = new pb::MessageParser<G2C_GetRoomInfo_Res>(() => (G2C_GetRoomInfo_Res)MessagePool.Instance.Fetch(typeof(G2C_GetRoomInfo_Res)));
    public static pb::MessageParser<G2C_GetRoomInfo_Res> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private int error_;
    public int Error {
      get { return error_; }
      set {
        error_ = value;
      }
    }

    private string message_ = "";
    public string Message {
      get { return message_; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private global::ETHotfix.RoomData roomData_;
    public global::ETHotfix.RoomData RoomData {
      get { return roomData_; }
      set {
        roomData_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (roomData_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(RoomData);
      }
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (Error != 0) {
        output.WriteRawTag(216, 5);
        output.WriteInt32(Error);
      }
      if (Message.Length != 0) {
        output.WriteRawTag(226, 5);
        output.WriteString(Message);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (Error != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Error);
      }
      if (Message.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Message);
      }
      if (roomData_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(RoomData);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      if (roomData_ != null) MessagePool.Instance.Recycle(roomData_); roomData_ = null;
      rpcId_ = 0;
      error_ = 0;
      message_ = "";
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (roomData_ == null) {
              roomData_ = new global::ETHotfix.RoomData();
            }
            input.ReadMessage(roomData_);
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 728: {
            Error = input.ReadInt32();
            break;
          }
          case 738: {
            Message = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public partial class Actor_CountDown_Ntt : pb::IMessage {
    private static readonly pb::MessageParser<Actor_CountDown_Ntt> _parser = new pb::MessageParser<Actor_CountDown_Ntt>(() => (Actor_CountDown_Ntt)MessagePool.Instance.Fetch(typeof(Actor_CountDown_Ntt)));
    public static pb::MessageParser<Actor_CountDown_Ntt> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private long actorId_;
    public long ActorId {
      get { return actorId_; }
      set {
        actorId_ = value;
      }
    }

    private string message1_ = "";
    public string Message1 {
      get { return message1_; }
      set {
        message1_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private int roomId_;
    public int RoomId {
      get { return roomId_; }
      set {
        roomId_ = value;
      }
    }

    private int leftTime_;
    public int LeftTime {
      get { return leftTime_; }
      set {
        leftTime_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Message1.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Message1);
      }
      if (RoomId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(RoomId);
      }
      if (LeftTime != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(LeftTime);
      }
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (ActorId != 0L) {
        output.WriteRawTag(240, 5);
        output.WriteInt64(ActorId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (ActorId != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(ActorId);
      }
      if (Message1.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Message1);
      }
      if (RoomId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RoomId);
      }
      if (LeftTime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(LeftTime);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      message1_ = "";
      roomId_ = 0;
      leftTime_ = 0;
      rpcId_ = 0;
      actorId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Message1 = input.ReadString();
            break;
          }
          case 16: {
            RoomId = input.ReadInt32();
            break;
          }
          case 24: {
            LeftTime = input.ReadInt32();
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 752: {
            ActorId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public partial class Card : pb::IMessage {
    private static readonly pb::MessageParser<Card> _parser = new pb::MessageParser<Card>(() => (Card)MessagePool.Instance.Fetch(typeof(Card)));
    public static pb::MessageParser<Card> Parser { get { return _parser; } }

    private static readonly pb::FieldCodec<int> _repeated_card_codec
        = pb::FieldCodec.ForInt32(10);
    private pbc::RepeatedField<int> card_ = new pbc::RepeatedField<int>();
    public pbc::RepeatedField<int> Card_ {
      get { return card_; }
      set { card_ = value; }
    }

    private string paiXing_ = "";
    public string PaiXing {
      get { return paiXing_; }
      set {
        paiXing_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private int cardType_;
    public int CardType {
      get { return cardType_; }
      set {
        cardType_ = value;
      }
    }

    private int multiple_;
    public int Multiple {
      get { return multiple_; }
      set {
        multiple_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      card_.WriteTo(output, _repeated_card_codec);
      if (PaiXing.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(PaiXing);
      }
      if (CardType != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(CardType);
      }
      if (Multiple != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Multiple);
      }
    }

    public int CalculateSize() {
      int size = 0;
      size += card_.CalculateSize(_repeated_card_codec);
      if (PaiXing.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PaiXing);
      }
      if (CardType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CardType);
      }
      if (Multiple != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Multiple);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      card_.Clear();
      paiXing_ = "";
      cardType_ = 0;
      multiple_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10:
          case 8: {
            card_.AddEntriesFrom(input, _repeated_card_codec);
            break;
          }
          case 18: {
            PaiXing = input.ReadString();
            break;
          }
          case 24: {
            CardType = input.ReadInt32();
            break;
          }
          case 32: {
            Multiple = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public partial class C2G_QuitRoom_Req : pb::IMessage {
    private static readonly pb::MessageParser<C2G_QuitRoom_Req> _parser = new pb::MessageParser<C2G_QuitRoom_Req>(() => (C2G_QuitRoom_Req)MessagePool.Instance.Fetch(typeof(C2G_QuitRoom_Req)));
    public static pb::MessageParser<C2G_QuitRoom_Req> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private int gameId_;
    public int GameId {
      get { return gameId_; }
      set {
        gameId_ = value;
      }
    }

    private int areaId_;
    public int AreaId {
      get { return areaId_; }
      set {
        areaId_ = value;
      }
    }

    private int roomId_;
    public int RoomId {
      get { return roomId_; }
      set {
        roomId_ = value;
      }
    }

    private long userId_;
    public long UserId {
      get { return userId_; }
      set {
        userId_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (GameId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(GameId);
      }
      if (AreaId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(AreaId);
      }
      if (RoomId != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(RoomId);
      }
      if (UserId != 0L) {
        output.WriteRawTag(32);
        output.WriteInt64(UserId);
      }
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (GameId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(GameId);
      }
      if (AreaId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(AreaId);
      }
      if (RoomId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RoomId);
      }
      if (UserId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(UserId);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      gameId_ = 0;
      areaId_ = 0;
      roomId_ = 0;
      userId_ = 0;
      rpcId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            GameId = input.ReadInt32();
            break;
          }
          case 16: {
            AreaId = input.ReadInt32();
            break;
          }
          case 24: {
            RoomId = input.ReadInt32();
            break;
          }
          case 32: {
            UserId = input.ReadInt64();
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public partial class G2C_QuitRoom_Res : pb::IMessage {
    private static readonly pb::MessageParser<G2C_QuitRoom_Res> _parser = new pb::MessageParser<G2C_QuitRoom_Res>(() => (G2C_QuitRoom_Res)MessagePool.Instance.Fetch(typeof(G2C_QuitRoom_Res)));
    public static pb::MessageParser<G2C_QuitRoom_Res> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private int error_;
    public int Error {
      get { return error_; }
      set {
        error_ = value;
      }
    }

    private string message_ = "";
    public string Message {
      get { return message_; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (Error != 0) {
        output.WriteRawTag(216, 5);
        output.WriteInt32(Error);
      }
      if (Message.Length != 0) {
        output.WriteRawTag(226, 5);
        output.WriteString(Message);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (Error != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Error);
      }
      if (Message.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Message);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      rpcId_ = 0;
      error_ = 0;
      message_ = "";
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 728: {
            Error = input.ReadInt32();
            break;
          }
          case 738: {
            Message = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public partial class Actor_OtherPlayerSitDown_Ntt : pb::IMessage {
    private static readonly pb::MessageParser<Actor_OtherPlayerSitDown_Ntt> _parser = new pb::MessageParser<Actor_OtherPlayerSitDown_Ntt>(() => (Actor_OtherPlayerSitDown_Ntt)MessagePool.Instance.Fetch(typeof(Actor_OtherPlayerSitDown_Ntt)));
    public static pb::MessageParser<Actor_OtherPlayerSitDown_Ntt> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private long actorId_;
    public long ActorId {
      get { return actorId_; }
      set {
        actorId_ = value;
      }
    }

    private string message1_ = "";
    public string Message1 {
      get { return message1_; }
      set {
        message1_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private int roomId_;
    public int RoomId {
      get { return roomId_; }
      set {
        roomId_ = value;
      }
    }

    private long userId_;
    public long UserId {
      get { return userId_; }
      set {
        userId_ = value;
      }
    }

    private global::ETHotfix.PlayerData playerData_;
    public global::ETHotfix.PlayerData PlayerData {
      get { return playerData_; }
      set {
        playerData_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Message1.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Message1);
      }
      if (RoomId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(RoomId);
      }
      if (UserId != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(UserId);
      }
      if (playerData_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(PlayerData);
      }
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (ActorId != 0L) {
        output.WriteRawTag(240, 5);
        output.WriteInt64(ActorId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (ActorId != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(ActorId);
      }
      if (Message1.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Message1);
      }
      if (RoomId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RoomId);
      }
      if (UserId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(UserId);
      }
      if (playerData_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(PlayerData);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      message1_ = "";
      roomId_ = 0;
      userId_ = 0;
      if (playerData_ != null) MessagePool.Instance.Recycle(playerData_); playerData_ = null;
      rpcId_ = 0;
      actorId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Message1 = input.ReadString();
            break;
          }
          case 16: {
            RoomId = input.ReadInt32();
            break;
          }
          case 24: {
            UserId = input.ReadInt64();
            break;
          }
          case 34: {
            if (playerData_ == null) {
              playerData_ = new global::ETHotfix.PlayerData();
            }
            input.ReadMessage(playerData_);
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 752: {
            ActorId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public partial class Actor_OtherPlayerStand_Ntt : pb::IMessage {
    private static readonly pb::MessageParser<Actor_OtherPlayerStand_Ntt> _parser = new pb::MessageParser<Actor_OtherPlayerStand_Ntt>(() => (Actor_OtherPlayerStand_Ntt)MessagePool.Instance.Fetch(typeof(Actor_OtherPlayerStand_Ntt)));
    public static pb::MessageParser<Actor_OtherPlayerStand_Ntt> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private long actorId_;
    public long ActorId {
      get { return actorId_; }
      set {
        actorId_ = value;
      }
    }

    private string message1_ = "";
    public string Message1 {
      get { return message1_; }
      set {
        message1_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private int roomId_;
    public int RoomId {
      get { return roomId_; }
      set {
        roomId_ = value;
      }
    }

    private long userId_;
    public long UserId {
      get { return userId_; }
      set {
        userId_ = value;
      }
    }

    private int chairId_;
    public int ChairId {
      get { return chairId_; }
      set {
        chairId_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Message1.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Message1);
      }
      if (RoomId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(RoomId);
      }
      if (UserId != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(UserId);
      }
      if (ChairId != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(ChairId);
      }
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (ActorId != 0L) {
        output.WriteRawTag(240, 5);
        output.WriteInt64(ActorId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (ActorId != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(ActorId);
      }
      if (Message1.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Message1);
      }
      if (RoomId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RoomId);
      }
      if (UserId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(UserId);
      }
      if (ChairId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ChairId);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      message1_ = "";
      roomId_ = 0;
      userId_ = 0;
      chairId_ = 0;
      rpcId_ = 0;
      actorId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Message1 = input.ReadString();
            break;
          }
          case 16: {
            RoomId = input.ReadInt32();
            break;
          }
          case 24: {
            UserId = input.ReadInt64();
            break;
          }
          case 32: {
            ChairId = input.ReadInt32();
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 752: {
            ActorId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public partial class C2G_GetRankList_Req : pb::IMessage {
    private static readonly pb::MessageParser<C2G_GetRankList_Req> _parser = new pb::MessageParser<C2G_GetRankList_Req>(() => (C2G_GetRankList_Req)MessagePool.Instance.Fetch(typeof(C2G_GetRankList_Req)));
    public static pb::MessageParser<C2G_GetRankList_Req> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      rpcId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public partial class G2C_GetRankList_Res : pb::IMessage {
    private static readonly pb::MessageParser<G2C_GetRankList_Res> _parser = new pb::MessageParser<G2C_GetRankList_Res>(() => (G2C_GetRankList_Res)MessagePool.Instance.Fetch(typeof(G2C_GetRankList_Res)));
    public static pb::MessageParser<G2C_GetRankList_Res> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private int error_;
    public int Error {
      get { return error_; }
      set {
        error_ = value;
      }
    }

    private string message_ = "";
    public string Message {
      get { return message_; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private static readonly pb::FieldCodec<global::ETHotfix.UserInfo> _repeated_incomeList_codec
        = pb::FieldCodec.ForMessage(26, global::ETHotfix.UserInfo.Parser);
    private pbc::RepeatedField<global::ETHotfix.UserInfo> incomeList_ = new pbc::RepeatedField<global::ETHotfix.UserInfo>();
    public pbc::RepeatedField<global::ETHotfix.UserInfo> IncomeList {
      get { return incomeList_; }
      set { incomeList_ = value; }
    }

    private static readonly pb::FieldCodec<global::ETHotfix.UserInfo> _repeated_goldList_codec
        = pb::FieldCodec.ForMessage(34, global::ETHotfix.UserInfo.Parser);
    private pbc::RepeatedField<global::ETHotfix.UserInfo> goldList_ = new pbc::RepeatedField<global::ETHotfix.UserInfo>();
    public pbc::RepeatedField<global::ETHotfix.UserInfo> GoldList {
      get { return goldList_; }
      set { goldList_ = value; }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      incomeList_.WriteTo(output, _repeated_incomeList_codec);
      goldList_.WriteTo(output, _repeated_goldList_codec);
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (Error != 0) {
        output.WriteRawTag(216, 5);
        output.WriteInt32(Error);
      }
      if (Message.Length != 0) {
        output.WriteRawTag(226, 5);
        output.WriteString(Message);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (Error != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Error);
      }
      if (Message.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Message);
      }
      size += incomeList_.CalculateSize(_repeated_incomeList_codec);
      size += goldList_.CalculateSize(_repeated_goldList_codec);
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      for (int i = 0; i < incomeList_.Count; i++) { MessagePool.Instance.Recycle(incomeList_[i]); }
      incomeList_.Clear();
      for (int i = 0; i < goldList_.Count; i++) { MessagePool.Instance.Recycle(goldList_[i]); }
      goldList_.Clear();
      rpcId_ = 0;
      error_ = 0;
      message_ = "";
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 26: {
            incomeList_.AddEntriesFrom(input, _repeated_incomeList_codec);
            break;
          }
          case 34: {
            goldList_.AddEntriesFrom(input, _repeated_goldList_codec);
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 728: {
            Error = input.ReadInt32();
            break;
          }
          case 738: {
            Message = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public partial class C2G_ChangerRoom_Req : pb::IMessage {
    private static readonly pb::MessageParser<C2G_ChangerRoom_Req> _parser = new pb::MessageParser<C2G_ChangerRoom_Req>(() => (C2G_ChangerRoom_Req)MessagePool.Instance.Fetch(typeof(C2G_ChangerRoom_Req)));
    public static pb::MessageParser<C2G_ChangerRoom_Req> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private int gameId_;
    public int GameId {
      get { return gameId_; }
      set {
        gameId_ = value;
      }
    }

    private int areaId_;
    public int AreaId {
      get { return areaId_; }
      set {
        areaId_ = value;
      }
    }

    private int roomId_;
    public int RoomId {
      get { return roomId_; }
      set {
        roomId_ = value;
      }
    }

    private long userId_;
    public long UserId {
      get { return userId_; }
      set {
        userId_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (GameId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(GameId);
      }
      if (AreaId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(AreaId);
      }
      if (RoomId != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(RoomId);
      }
      if (UserId != 0L) {
        output.WriteRawTag(32);
        output.WriteInt64(UserId);
      }
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (GameId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(GameId);
      }
      if (AreaId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(AreaId);
      }
      if (RoomId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RoomId);
      }
      if (UserId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(UserId);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      gameId_ = 0;
      areaId_ = 0;
      roomId_ = 0;
      userId_ = 0;
      rpcId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            GameId = input.ReadInt32();
            break;
          }
          case 16: {
            AreaId = input.ReadInt32();
            break;
          }
          case 24: {
            RoomId = input.ReadInt32();
            break;
          }
          case 32: {
            UserId = input.ReadInt64();
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public partial class G2C_ChangerRoom_Res : pb::IMessage {
    private static readonly pb::MessageParser<G2C_ChangerRoom_Res> _parser = new pb::MessageParser<G2C_ChangerRoom_Res>(() => (G2C_ChangerRoom_Res)MessagePool.Instance.Fetch(typeof(G2C_ChangerRoom_Res)));
    public static pb::MessageParser<G2C_ChangerRoom_Res> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private int error_;
    public int Error {
      get { return error_; }
      set {
        error_ = value;
      }
    }

    private string message_ = "";
    public string Message {
      get { return message_; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private int gameId_;
    public int GameId {
      get { return gameId_; }
      set {
        gameId_ = value;
      }
    }

    private int areaId_;
    public int AreaId {
      get { return areaId_; }
      set {
        areaId_ = value;
      }
    }

    private int roomId_;
    public int RoomId {
      get { return roomId_; }
      set {
        roomId_ = value;
      }
    }

    private int index_;
    public int Index {
      get { return index_; }
      set {
        index_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (GameId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(GameId);
      }
      if (AreaId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(AreaId);
      }
      if (RoomId != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(RoomId);
      }
      if (Index != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Index);
      }
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (Error != 0) {
        output.WriteRawTag(216, 5);
        output.WriteInt32(Error);
      }
      if (Message.Length != 0) {
        output.WriteRawTag(226, 5);
        output.WriteString(Message);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (Error != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Error);
      }
      if (Message.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Message);
      }
      if (GameId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(GameId);
      }
      if (AreaId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(AreaId);
      }
      if (RoomId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RoomId);
      }
      if (Index != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Index);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      gameId_ = 0;
      areaId_ = 0;
      roomId_ = 0;
      index_ = 0;
      rpcId_ = 0;
      error_ = 0;
      message_ = "";
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            GameId = input.ReadInt32();
            break;
          }
          case 16: {
            AreaId = input.ReadInt32();
            break;
          }
          case 24: {
            RoomId = input.ReadInt32();
            break;
          }
          case 32: {
            Index = input.ReadInt32();
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 728: {
            Error = input.ReadInt32();
            break;
          }
          case 738: {
            Message = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public partial class AnnounceInfo : pb::IMessage {
    private static readonly pb::MessageParser<AnnounceInfo> _parser = new pb::MessageParser<AnnounceInfo>(() => (AnnounceInfo)MessagePool.Instance.Fetch(typeof(AnnounceInfo)));
    public static pb::MessageParser<AnnounceInfo> Parser { get { return _parser; } }

    private string title_ = "";
    public string Title {
      get { return title_; }
      set {
        title_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private string content_ = "";
    public string Content {
      get { return content_; }
      set {
        content_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private string timestamp_ = "";
    public string Timestamp {
      get { return timestamp_; }
      set {
        timestamp_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Title.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Title);
      }
      if (Content.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Content);
      }
      if (Timestamp.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Timestamp);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (Title.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Title);
      }
      if (Content.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Content);
      }
      if (Timestamp.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Timestamp);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      title_ = "";
      content_ = "";
      timestamp_ = "";
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Title = input.ReadString();
            break;
          }
          case 18: {
            Content = input.ReadString();
            break;
          }
          case 26: {
            Timestamp = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public partial class C2G_Announcement_Req : pb::IMessage {
    private static readonly pb::MessageParser<C2G_Announcement_Req> _parser = new pb::MessageParser<C2G_Announcement_Req>(() => (C2G_Announcement_Req)MessagePool.Instance.Fetch(typeof(C2G_Announcement_Req)));
    public static pb::MessageParser<C2G_Announcement_Req> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      rpcId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public partial class G2C_Announcement_Res : pb::IMessage {
    private static readonly pb::MessageParser<G2C_Announcement_Res> _parser = new pb::MessageParser<G2C_Announcement_Res>(() => (G2C_Announcement_Res)MessagePool.Instance.Fetch(typeof(G2C_Announcement_Res)));
    public static pb::MessageParser<G2C_Announcement_Res> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private int error_;
    public int Error {
      get { return error_; }
      set {
        error_ = value;
      }
    }

    private string message_ = "";
    public string Message {
      get { return message_; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private static readonly pb::FieldCodec<global::ETHotfix.AnnounceInfo> _repeated_info_codec
        = pb::FieldCodec.ForMessage(10, global::ETHotfix.AnnounceInfo.Parser);
    private pbc::RepeatedField<global::ETHotfix.AnnounceInfo> info_ = new pbc::RepeatedField<global::ETHotfix.AnnounceInfo>();
    public pbc::RepeatedField<global::ETHotfix.AnnounceInfo> Info {
      get { return info_; }
      set { info_ = value; }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      info_.WriteTo(output, _repeated_info_codec);
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (Error != 0) {
        output.WriteRawTag(216, 5);
        output.WriteInt32(Error);
      }
      if (Message.Length != 0) {
        output.WriteRawTag(226, 5);
        output.WriteString(Message);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (Error != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Error);
      }
      if (Message.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Message);
      }
      size += info_.CalculateSize(_repeated_info_codec);
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      for (int i = 0; i < info_.Count; i++) { MessagePool.Instance.Recycle(info_[i]); }
      info_.Clear();
      rpcId_ = 0;
      error_ = 0;
      message_ = "";
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            info_.AddEntriesFrom(input, _repeated_info_codec);
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 728: {
            Error = input.ReadInt32();
            break;
          }
          case 738: {
            Message = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public partial class Record : pb::IMessage {
    private static readonly pb::MessageParser<Record> _parser = new pb::MessageParser<Record>(() => (Record)MessagePool.Instance.Fetch(typeof(Record)));
    public static pb::MessageParser<Record> Parser { get { return _parser; } }

    private int gameId_;
    public int GameId {
      get { return gameId_; }
      set {
        gameId_ = value;
      }
    }

    private string jionTime_ = "";
    public string JionTime {
      get { return jionTime_; }
      set {
        jionTime_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private string quitTime_ = "";
    public string QuitTime {
      get { return quitTime_; }
      set {
        quitTime_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private float income_;
    public float Income {
      get { return income_; }
      set {
        income_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (GameId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(GameId);
      }
      if (JionTime.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(JionTime);
      }
      if (QuitTime.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(QuitTime);
      }
      if (Income != 0F) {
        output.WriteRawTag(37);
        output.WriteFloat(Income);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (GameId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(GameId);
      }
      if (JionTime.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(JionTime);
      }
      if (QuitTime.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(QuitTime);
      }
      if (Income != 0F) {
        size += 1 + 4;
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      gameId_ = 0;
      jionTime_ = "";
      quitTime_ = "";
      income_ = 0f;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            GameId = input.ReadInt32();
            break;
          }
          case 18: {
            JionTime = input.ReadString();
            break;
          }
          case 26: {
            QuitTime = input.ReadString();
            break;
          }
          case 37: {
            Income = input.ReadFloat();
            break;
          }
        }
      }
    }

  }

  public partial class C2G_MyRecord_Req : pb::IMessage {
    private static readonly pb::MessageParser<C2G_MyRecord_Req> _parser = new pb::MessageParser<C2G_MyRecord_Req>(() => (C2G_MyRecord_Req)MessagePool.Instance.Fetch(typeof(C2G_MyRecord_Req)));
    public static pb::MessageParser<C2G_MyRecord_Req> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private long userId_;
    public long UserId {
      get { return userId_; }
      set {
        userId_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (UserId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(UserId);
      }
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (UserId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(UserId);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      userId_ = 0;
      rpcId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            UserId = input.ReadInt64();
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public partial class G2C_MyRecord_Res : pb::IMessage {
    private static readonly pb::MessageParser<G2C_MyRecord_Res> _parser = new pb::MessageParser<G2C_MyRecord_Res>(() => (G2C_MyRecord_Res)MessagePool.Instance.Fetch(typeof(G2C_MyRecord_Res)));
    public static pb::MessageParser<G2C_MyRecord_Res> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private int error_;
    public int Error {
      get { return error_; }
      set {
        error_ = value;
      }
    }

    private string message_ = "";
    public string Message {
      get { return message_; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private static readonly pb::FieldCodec<global::ETHotfix.Record> _repeated_recordlist_codec
        = pb::FieldCodec.ForMessage(10, global::ETHotfix.Record.Parser);
    private pbc::RepeatedField<global::ETHotfix.Record> recordlist_ = new pbc::RepeatedField<global::ETHotfix.Record>();
    public pbc::RepeatedField<global::ETHotfix.Record> Recordlist {
      get { return recordlist_; }
      set { recordlist_ = value; }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      recordlist_.WriteTo(output, _repeated_recordlist_codec);
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (Error != 0) {
        output.WriteRawTag(216, 5);
        output.WriteInt32(Error);
      }
      if (Message.Length != 0) {
        output.WriteRawTag(226, 5);
        output.WriteString(Message);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (Error != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Error);
      }
      if (Message.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Message);
      }
      size += recordlist_.CalculateSize(_repeated_recordlist_codec);
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      for (int i = 0; i < recordlist_.Count; i++) { MessagePool.Instance.Recycle(recordlist_[i]); }
      recordlist_.Clear();
      rpcId_ = 0;
      error_ = 0;
      message_ = "";
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            recordlist_.AddEntriesFrom(input, _repeated_recordlist_codec);
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 728: {
            Error = input.ReadInt32();
            break;
          }
          case 738: {
            Message = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public partial class C2G_TouristsLogin_Req : pb::IMessage {
    private static readonly pb::MessageParser<C2G_TouristsLogin_Req> _parser = new pb::MessageParser<C2G_TouristsLogin_Req>(() => (C2G_TouristsLogin_Req)MessagePool.Instance.Fetch(typeof(C2G_TouristsLogin_Req)));
    public static pb::MessageParser<C2G_TouristsLogin_Req> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      rpcId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public partial class G2C_TouristsLogin_Res : pb::IMessage {
    private static readonly pb::MessageParser<G2C_TouristsLogin_Res> _parser = new pb::MessageParser<G2C_TouristsLogin_Res>(() => (G2C_TouristsLogin_Res)MessagePool.Instance.Fetch(typeof(G2C_TouristsLogin_Res)));
    public static pb::MessageParser<G2C_TouristsLogin_Res> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private int error_;
    public int Error {
      get { return error_; }
      set {
        error_ = value;
      }
    }

    private string message_ = "";
    public string Message {
      get { return message_; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private string account_ = "";
    public string Account {
      get { return account_; }
      set {
        account_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private string password_ = "";
    public string Password {
      get { return password_; }
      set {
        password_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Account.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Account);
      }
      if (Password.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Password);
      }
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (Error != 0) {
        output.WriteRawTag(216, 5);
        output.WriteInt32(Error);
      }
      if (Message.Length != 0) {
        output.WriteRawTag(226, 5);
        output.WriteString(Message);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (Error != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Error);
      }
      if (Message.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Message);
      }
      if (Account.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Account);
      }
      if (Password.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Password);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      account_ = "";
      password_ = "";
      rpcId_ = 0;
      error_ = 0;
      message_ = "";
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Account = input.ReadString();
            break;
          }
          case 18: {
            Password = input.ReadString();
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 728: {
            Error = input.ReadInt32();
            break;
          }
          case 738: {
            Message = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public partial class C2G_ResetPassword_Req : pb::IMessage {
    private static readonly pb::MessageParser<C2G_ResetPassword_Req> _parser = new pb::MessageParser<C2G_ResetPassword_Req>(() => (C2G_ResetPassword_Req)MessagePool.Instance.Fetch(typeof(C2G_ResetPassword_Req)));
    public static pb::MessageParser<C2G_ResetPassword_Req> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private long userId_;
    public long UserId {
      get { return userId_; }
      set {
        userId_ = value;
      }
    }

    private string oldPassword_ = "";
    public string OldPassword {
      get { return oldPassword_; }
      set {
        oldPassword_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private string newPassword_ = "";
    public string NewPassword {
      get { return newPassword_; }
      set {
        newPassword_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (UserId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(UserId);
      }
      if (OldPassword.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(OldPassword);
      }
      if (NewPassword.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(NewPassword);
      }
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (UserId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(UserId);
      }
      if (OldPassword.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(OldPassword);
      }
      if (NewPassword.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(NewPassword);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      userId_ = 0;
      oldPassword_ = "";
      newPassword_ = "";
      rpcId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            UserId = input.ReadInt64();
            break;
          }
          case 18: {
            OldPassword = input.ReadString();
            break;
          }
          case 26: {
            NewPassword = input.ReadString();
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public partial class G2C_ResetPassword_Res : pb::IMessage {
    private static readonly pb::MessageParser<G2C_ResetPassword_Res> _parser = new pb::MessageParser<G2C_ResetPassword_Res>(() => (G2C_ResetPassword_Res)MessagePool.Instance.Fetch(typeof(G2C_ResetPassword_Res)));
    public static pb::MessageParser<G2C_ResetPassword_Res> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private int error_;
    public int Error {
      get { return error_; }
      set {
        error_ = value;
      }
    }

    private string message_ = "";
    public string Message {
      get { return message_; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (Error != 0) {
        output.WriteRawTag(216, 5);
        output.WriteInt32(Error);
      }
      if (Message.Length != 0) {
        output.WriteRawTag(226, 5);
        output.WriteString(Message);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (Error != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Error);
      }
      if (Message.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Message);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      rpcId_ = 0;
      error_ = 0;
      message_ = "";
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 728: {
            Error = input.ReadInt32();
            break;
          }
          case 738: {
            Message = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public partial class Actor_PlayerOffline_Ntt : pb::IMessage {
    private static readonly pb::MessageParser<Actor_PlayerOffline_Ntt> _parser = new pb::MessageParser<Actor_PlayerOffline_Ntt>(() => (Actor_PlayerOffline_Ntt)MessagePool.Instance.Fetch(typeof(Actor_PlayerOffline_Ntt)));
    public static pb::MessageParser<Actor_PlayerOffline_Ntt> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private long actorId_;
    public long ActorId {
      get { return actorId_; }
      set {
        actorId_ = value;
      }
    }

    private string message1_ = "";
    public string Message1 {
      get { return message1_; }
      set {
        message1_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private int playerOfflineTypes_;
    public int PlayerOfflineTypes {
      get { return playerOfflineTypes_; }
      set {
        playerOfflineTypes_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Message1.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Message1);
      }
      if (PlayerOfflineTypes != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(PlayerOfflineTypes);
      }
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (ActorId != 0L) {
        output.WriteRawTag(240, 5);
        output.WriteInt64(ActorId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (ActorId != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(ActorId);
      }
      if (Message1.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Message1);
      }
      if (PlayerOfflineTypes != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PlayerOfflineTypes);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      message1_ = "";
      playerOfflineTypes_ = 0;
      rpcId_ = 0;
      actorId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Message1 = input.ReadString();
            break;
          }
          case 16: {
            PlayerOfflineTypes = input.ReadInt32();
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 752: {
            ActorId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public partial class DDZPlayerInfo : pb::IMessage {
    private static readonly pb::MessageParser<DDZPlayerInfo> _parser = new pb::MessageParser<DDZPlayerInfo>(() => (DDZPlayerInfo)MessagePool.Instance.Fetch(typeof(DDZPlayerInfo)));
    public static pb::MessageParser<DDZPlayerInfo> Parser { get { return _parser; } }

    private long userId_;
    public long UserId {
      get { return userId_; }
      set {
        userId_ = value;
      }
    }

    private int chairId_;
    public int ChairId {
      get { return chairId_; }
      set {
        chairId_ = value;
      }
    }

    private int playerId_;
    public int PlayerId {
      get { return playerId_; }
      set {
        playerId_ = value;
      }
    }

    private string nickeName_ = "";
    public string NickeName {
      get { return nickeName_; }
      set {
        nickeName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private float gold_;
    public float Gold {
      get { return gold_; }
      set {
        gold_ = value;
      }
    }

    private int headId_;
    public int HeadId {
      get { return headId_; }
      set {
        headId_ = value;
      }
    }

    private int gender_;
    public int Gender {
      get { return gender_; }
      set {
        gender_ = value;
      }
    }

    private float score_;
    public float Score {
      get { return score_; }
      set {
        score_ = value;
      }
    }

    private bool isLord_;
    public bool IsLord {
      get { return isLord_; }
      set {
        isLord_ = value;
      }
    }

    private bool isPrepare_;
    public bool IsPrepare {
      get { return isPrepare_; }
      set {
        isPrepare_ = value;
      }
    }

    private int qdzJiaoFen_;
    public int QdzJiaoFen {
      get { return qdzJiaoFen_; }
      set {
        qdzJiaoFen_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (UserId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(UserId);
      }
      if (ChairId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(ChairId);
      }
      if (PlayerId != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(PlayerId);
      }
      if (NickeName.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(NickeName);
      }
      if (Gold != 0F) {
        output.WriteRawTag(45);
        output.WriteFloat(Gold);
      }
      if (HeadId != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(HeadId);
      }
      if (Gender != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(Gender);
      }
      if (Score != 0F) {
        output.WriteRawTag(69);
        output.WriteFloat(Score);
      }
      if (IsLord != false) {
        output.WriteRawTag(72);
        output.WriteBool(IsLord);
      }
      if (IsPrepare != false) {
        output.WriteRawTag(80);
        output.WriteBool(IsPrepare);
      }
      if (QdzJiaoFen != 0) {
        output.WriteRawTag(88);
        output.WriteInt32(QdzJiaoFen);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (UserId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(UserId);
      }
      if (ChairId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ChairId);
      }
      if (PlayerId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PlayerId);
      }
      if (NickeName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(NickeName);
      }
      if (Gold != 0F) {
        size += 1 + 4;
      }
      if (HeadId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(HeadId);
      }
      if (Gender != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Gender);
      }
      if (Score != 0F) {
        size += 1 + 4;
      }
      if (IsLord != false) {
        size += 1 + 1;
      }
      if (IsPrepare != false) {
        size += 1 + 1;
      }
      if (QdzJiaoFen != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(QdzJiaoFen);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      userId_ = 0;
      chairId_ = 0;
      playerId_ = 0;
      nickeName_ = "";
      gold_ = 0f;
      headId_ = 0;
      gender_ = 0;
      score_ = 0f;
      isLord_ = false;
      isPrepare_ = false;
      qdzJiaoFen_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            UserId = input.ReadInt64();
            break;
          }
          case 16: {
            ChairId = input.ReadInt32();
            break;
          }
          case 24: {
            PlayerId = input.ReadInt32();
            break;
          }
          case 34: {
            NickeName = input.ReadString();
            break;
          }
          case 45: {
            Gold = input.ReadFloat();
            break;
          }
          case 48: {
            HeadId = input.ReadInt32();
            break;
          }
          case 56: {
            Gender = input.ReadInt32();
            break;
          }
          case 69: {
            Score = input.ReadFloat();
            break;
          }
          case 72: {
            IsLord = input.ReadBool();
            break;
          }
          case 80: {
            IsPrepare = input.ReadBool();
            break;
          }
          case 88: {
            QdzJiaoFen = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public partial class DDZRoomData : pb::IMessage {
    private static readonly pb::MessageParser<DDZRoomData> _parser = new pb::MessageParser<DDZRoomData>(() => (DDZRoomData)MessagePool.Instance.Fetch(typeof(DDZRoomData)));
    public static pb::MessageParser<DDZRoomData> Parser { get { return _parser; } }

    private int gameState_;
    public int GameState {
      get { return gameState_; }
      set {
        gameState_ = value;
      }
    }

    private int qdzLifeTime_;
    public int QdzLifeTime {
      get { return qdzLifeTime_; }
      set {
        qdzLifeTime_ = value;
      }
    }

    private int cpLifeTime_;
    public int CpLifeTime {
      get { return cpLifeTime_; }
      set {
        cpLifeTime_ = value;
      }
    }

    private int jsLifeTime_;
    public int JsLifeTime {
      get { return jsLifeTime_; }
      set {
        jsLifeTime_ = value;
      }
    }

    private static readonly pb::FieldCodec<int> _repeated_seatPlayer_codec
        = pb::FieldCodec.ForInt32(42);
    private pbc::RepeatedField<int> seatPlayer_ = new pbc::RepeatedField<int>();
    public pbc::RepeatedField<int> SeatPlayer {
      get { return seatPlayer_; }
      set { seatPlayer_ = value; }
    }

    private static readonly pb::FieldCodec<global::ETHotfix.DDZPlayerInfo> _repeated_playerData_codec
        = pb::FieldCodec.ForMessage(50, global::ETHotfix.DDZPlayerInfo.Parser);
    private pbc::RepeatedField<global::ETHotfix.DDZPlayerInfo> playerData_ = new pbc::RepeatedField<global::ETHotfix.DDZPlayerInfo>();
    public pbc::RepeatedField<global::ETHotfix.DDZPlayerInfo> PlayerData {
      get { return playerData_; }
      set { playerData_ = value; }
    }

    private int diFen_;
    public int DiFen {
      get { return diFen_; }
      set {
        diFen_ = value;
      }
    }

    private int activeChairId_;
    public int ActiveChairId {
      get { return activeChairId_; }
      set {
        activeChairId_ = value;
      }
    }

    private global::ETHotfix.DDZCard card_;
    public global::ETHotfix.DDZCard Card {
      get { return card_; }
      set {
        card_ = value;
      }
    }

    private static readonly pb::FieldCodec<int> _repeated_surCardsNum_codec
        = pb::FieldCodec.ForInt32(82);
    private pbc::RepeatedField<int> surCardsNum_ = new pbc::RepeatedField<int>();
    public pbc::RepeatedField<int> SurCardsNum {
      get { return surCardsNum_; }
      set { surCardsNum_ = value; }
    }

    private global::ETHotfix.DDZCard dpCards_;
    public global::ETHotfix.DDZCard DpCards {
      get { return dpCards_; }
      set {
        dpCards_ = value;
      }
    }

    private int times_;
    public int Times {
      get { return times_; }
      set {
        times_ = value;
      }
    }

    private static readonly pb::FieldCodec<int> _repeated_passList_codec
        = pb::FieldCodec.ForInt32(106);
    private pbc::RepeatedField<int> passList_ = new pbc::RepeatedField<int>();
    public pbc::RepeatedField<int> PassList {
      get { return passList_; }
      set { passList_ = value; }
    }

    private static readonly pb::FieldCodec<global::ETHotfix.DDZCard> _repeated_playLastCircleCards_codec
        = pb::FieldCodec.ForMessage(114, global::ETHotfix.DDZCard.Parser);
    private pbc::RepeatedField<global::ETHotfix.DDZCard> playLastCircleCards_ = new pbc::RepeatedField<global::ETHotfix.DDZCard>();
    public pbc::RepeatedField<global::ETHotfix.DDZCard> PlayLastCircleCards {
      get { return playLastCircleCards_; }
      set { playLastCircleCards_ = value; }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (GameState != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(GameState);
      }
      if (QdzLifeTime != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(QdzLifeTime);
      }
      if (CpLifeTime != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(CpLifeTime);
      }
      if (JsLifeTime != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(JsLifeTime);
      }
      seatPlayer_.WriteTo(output, _repeated_seatPlayer_codec);
      playerData_.WriteTo(output, _repeated_playerData_codec);
      if (DiFen != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(DiFen);
      }
      if (ActiveChairId != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(ActiveChairId);
      }
      if (card_ != null) {
        output.WriteRawTag(74);
        output.WriteMessage(Card);
      }
      surCardsNum_.WriteTo(output, _repeated_surCardsNum_codec);
      if (dpCards_ != null) {
        output.WriteRawTag(90);
        output.WriteMessage(DpCards);
      }
      if (Times != 0) {
        output.WriteRawTag(96);
        output.WriteInt32(Times);
      }
      passList_.WriteTo(output, _repeated_passList_codec);
      playLastCircleCards_.WriteTo(output, _repeated_playLastCircleCards_codec);
    }

    public int CalculateSize() {
      int size = 0;
      if (GameState != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(GameState);
      }
      if (QdzLifeTime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(QdzLifeTime);
      }
      if (CpLifeTime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CpLifeTime);
      }
      if (JsLifeTime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(JsLifeTime);
      }
      size += seatPlayer_.CalculateSize(_repeated_seatPlayer_codec);
      size += playerData_.CalculateSize(_repeated_playerData_codec);
      if (DiFen != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(DiFen);
      }
      if (ActiveChairId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ActiveChairId);
      }
      if (card_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Card);
      }
      size += surCardsNum_.CalculateSize(_repeated_surCardsNum_codec);
      if (dpCards_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(DpCards);
      }
      if (Times != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Times);
      }
      size += passList_.CalculateSize(_repeated_passList_codec);
      size += playLastCircleCards_.CalculateSize(_repeated_playLastCircleCards_codec);
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      gameState_ = 0;
      qdzLifeTime_ = 0;
      cpLifeTime_ = 0;
      jsLifeTime_ = 0;
      seatPlayer_.Clear();
      for (int i = 0; i < playerData_.Count; i++) { MessagePool.Instance.Recycle(playerData_[i]); }
      playerData_.Clear();
      diFen_ = 0;
      activeChairId_ = 0;
      if (card_ != null) MessagePool.Instance.Recycle(card_); card_ = null;
      surCardsNum_.Clear();
      if (dpCards_ != null) MessagePool.Instance.Recycle(dpCards_); dpCards_ = null;
      times_ = 0;
      passList_.Clear();
      for (int i = 0; i < playLastCircleCards_.Count; i++) { MessagePool.Instance.Recycle(playLastCircleCards_[i]); }
      playLastCircleCards_.Clear();
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            GameState = input.ReadInt32();
            break;
          }
          case 16: {
            QdzLifeTime = input.ReadInt32();
            break;
          }
          case 24: {
            CpLifeTime = input.ReadInt32();
            break;
          }
          case 32: {
            JsLifeTime = input.ReadInt32();
            break;
          }
          case 42:
          case 40: {
            seatPlayer_.AddEntriesFrom(input, _repeated_seatPlayer_codec);
            break;
          }
          case 50: {
            playerData_.AddEntriesFrom(input, _repeated_playerData_codec);
            break;
          }
          case 56: {
            DiFen = input.ReadInt32();
            break;
          }
          case 64: {
            ActiveChairId = input.ReadInt32();
            break;
          }
          case 74: {
            if (card_ == null) {
              card_ = new global::ETHotfix.DDZCard();
            }
            input.ReadMessage(card_);
            break;
          }
          case 82:
          case 80: {
            surCardsNum_.AddEntriesFrom(input, _repeated_surCardsNum_codec);
            break;
          }
          case 90: {
            if (dpCards_ == null) {
              dpCards_ = new global::ETHotfix.DDZCard();
            }
            input.ReadMessage(dpCards_);
            break;
          }
          case 96: {
            Times = input.ReadInt32();
            break;
          }
          case 106:
          case 104: {
            passList_.AddEntriesFrom(input, _repeated_passList_codec);
            break;
          }
          case 114: {
            playLastCircleCards_.AddEntriesFrom(input, _repeated_playLastCircleCards_codec);
            break;
          }
        }
      }
    }

  }

  public partial class C2G_DDZPrepare_Req : pb::IMessage {
    private static readonly pb::MessageParser<C2G_DDZPrepare_Req> _parser = new pb::MessageParser<C2G_DDZPrepare_Req>(() => (C2G_DDZPrepare_Req)MessagePool.Instance.Fetch(typeof(C2G_DDZPrepare_Req)));
    public static pb::MessageParser<C2G_DDZPrepare_Req> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private int gameId_;
    public int GameId {
      get { return gameId_; }
      set {
        gameId_ = value;
      }
    }

    private int areaId_;
    public int AreaId {
      get { return areaId_; }
      set {
        areaId_ = value;
      }
    }

    private int roomId_;
    public int RoomId {
      get { return roomId_; }
      set {
        roomId_ = value;
      }
    }

    private long userId_;
    public long UserId {
      get { return userId_; }
      set {
        userId_ = value;
      }
    }

    private bool isPrepare_;
    public bool IsPrepare {
      get { return isPrepare_; }
      set {
        isPrepare_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (GameId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(GameId);
      }
      if (AreaId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(AreaId);
      }
      if (RoomId != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(RoomId);
      }
      if (UserId != 0L) {
        output.WriteRawTag(32);
        output.WriteInt64(UserId);
      }
      if (IsPrepare != false) {
        output.WriteRawTag(40);
        output.WriteBool(IsPrepare);
      }
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (GameId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(GameId);
      }
      if (AreaId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(AreaId);
      }
      if (RoomId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RoomId);
      }
      if (UserId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(UserId);
      }
      if (IsPrepare != false) {
        size += 1 + 1;
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      gameId_ = 0;
      areaId_ = 0;
      roomId_ = 0;
      userId_ = 0;
      isPrepare_ = false;
      rpcId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            GameId = input.ReadInt32();
            break;
          }
          case 16: {
            AreaId = input.ReadInt32();
            break;
          }
          case 24: {
            RoomId = input.ReadInt32();
            break;
          }
          case 32: {
            UserId = input.ReadInt64();
            break;
          }
          case 40: {
            IsPrepare = input.ReadBool();
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public partial class G2C_DDZPrepare_Res : pb::IMessage {
    private static readonly pb::MessageParser<G2C_DDZPrepare_Res> _parser = new pb::MessageParser<G2C_DDZPrepare_Res>(() => (G2C_DDZPrepare_Res)MessagePool.Instance.Fetch(typeof(G2C_DDZPrepare_Res)));
    public static pb::MessageParser<G2C_DDZPrepare_Res> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private int error_;
    public int Error {
      get { return error_; }
      set {
        error_ = value;
      }
    }

    private string message_ = "";
    public string Message {
      get { return message_; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (Error != 0) {
        output.WriteRawTag(216, 5);
        output.WriteInt32(Error);
      }
      if (Message.Length != 0) {
        output.WriteRawTag(226, 5);
        output.WriteString(Message);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (Error != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Error);
      }
      if (Message.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Message);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      rpcId_ = 0;
      error_ = 0;
      message_ = "";
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 728: {
            Error = input.ReadInt32();
            break;
          }
          case 738: {
            Message = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public partial class C2G_DDZAskScore_Req : pb::IMessage {
    private static readonly pb::MessageParser<C2G_DDZAskScore_Req> _parser = new pb::MessageParser<C2G_DDZAskScore_Req>(() => (C2G_DDZAskScore_Req)MessagePool.Instance.Fetch(typeof(C2G_DDZAskScore_Req)));
    public static pb::MessageParser<C2G_DDZAskScore_Req> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private int gameId_;
    public int GameId {
      get { return gameId_; }
      set {
        gameId_ = value;
      }
    }

    private int areaId_;
    public int AreaId {
      get { return areaId_; }
      set {
        areaId_ = value;
      }
    }

    private int roomId_;
    public int RoomId {
      get { return roomId_; }
      set {
        roomId_ = value;
      }
    }

    private long userId_;
    public long UserId {
      get { return userId_; }
      set {
        userId_ = value;
      }
    }

    private int score_;
    public int Score {
      get { return score_; }
      set {
        score_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (GameId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(GameId);
      }
      if (AreaId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(AreaId);
      }
      if (RoomId != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(RoomId);
      }
      if (UserId != 0L) {
        output.WriteRawTag(32);
        output.WriteInt64(UserId);
      }
      if (Score != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(Score);
      }
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (GameId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(GameId);
      }
      if (AreaId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(AreaId);
      }
      if (RoomId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RoomId);
      }
      if (UserId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(UserId);
      }
      if (Score != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Score);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      gameId_ = 0;
      areaId_ = 0;
      roomId_ = 0;
      userId_ = 0;
      score_ = 0;
      rpcId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            GameId = input.ReadInt32();
            break;
          }
          case 16: {
            AreaId = input.ReadInt32();
            break;
          }
          case 24: {
            RoomId = input.ReadInt32();
            break;
          }
          case 32: {
            UserId = input.ReadInt64();
            break;
          }
          case 40: {
            Score = input.ReadInt32();
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public partial class G2C_DDZAskScore_Res : pb::IMessage {
    private static readonly pb::MessageParser<G2C_DDZAskScore_Res> _parser = new pb::MessageParser<G2C_DDZAskScore_Res>(() => (G2C_DDZAskScore_Res)MessagePool.Instance.Fetch(typeof(G2C_DDZAskScore_Res)));
    public static pb::MessageParser<G2C_DDZAskScore_Res> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private int error_;
    public int Error {
      get { return error_; }
      set {
        error_ = value;
      }
    }

    private string message_ = "";
    public string Message {
      get { return message_; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private int chairId_;
    public int ChairId {
      get { return chairId_; }
      set {
        chairId_ = value;
      }
    }

    private int nextChairId_;
    public int NextChairId {
      get { return nextChairId_; }
      set {
        nextChairId_ = value;
      }
    }

    private int doType_;
    public int DoType {
      get { return doType_; }
      set {
        doType_ = value;
      }
    }

    private int lordChairId_;
    public int LordChairId {
      get { return lordChairId_; }
      set {
        lordChairId_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (ChairId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ChairId);
      }
      if (NextChairId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(NextChairId);
      }
      if (DoType != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(DoType);
      }
      if (LordChairId != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(LordChairId);
      }
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (Error != 0) {
        output.WriteRawTag(216, 5);
        output.WriteInt32(Error);
      }
      if (Message.Length != 0) {
        output.WriteRawTag(226, 5);
        output.WriteString(Message);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (Error != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Error);
      }
      if (Message.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Message);
      }
      if (ChairId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ChairId);
      }
      if (NextChairId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(NextChairId);
      }
      if (DoType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(DoType);
      }
      if (LordChairId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(LordChairId);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      chairId_ = 0;
      nextChairId_ = 0;
      doType_ = 0;
      lordChairId_ = 0;
      rpcId_ = 0;
      error_ = 0;
      message_ = "";
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ChairId = input.ReadInt32();
            break;
          }
          case 16: {
            NextChairId = input.ReadInt32();
            break;
          }
          case 24: {
            DoType = input.ReadInt32();
            break;
          }
          case 32: {
            LordChairId = input.ReadInt32();
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 728: {
            Error = input.ReadInt32();
            break;
          }
          case 738: {
            Message = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public partial class Actor_DDZMakeLord_Ntt : pb::IMessage {
    private static readonly pb::MessageParser<Actor_DDZMakeLord_Ntt> _parser = new pb::MessageParser<Actor_DDZMakeLord_Ntt>(() => (Actor_DDZMakeLord_Ntt)MessagePool.Instance.Fetch(typeof(Actor_DDZMakeLord_Ntt)));
    public static pb::MessageParser<Actor_DDZMakeLord_Ntt> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private long actorId_;
    public long ActorId {
      get { return actorId_; }
      set {
        actorId_ = value;
      }
    }

    private int roomId_;
    public int RoomId {
      get { return roomId_; }
      set {
        roomId_ = value;
      }
    }

    private int lordId_;
    public int LordId {
      get { return lordId_; }
      set {
        lordId_ = value;
      }
    }

    private static readonly pb::FieldCodec<int> _repeated_cardsNum_codec
        = pb::FieldCodec.ForInt32(26);
    private pbc::RepeatedField<int> cardsNum_ = new pbc::RepeatedField<int>();
    public pbc::RepeatedField<int> CardsNum {
      get { return cardsNum_; }
      set { cardsNum_ = value; }
    }

    private int times_;
    public int Times {
      get { return times_; }
      set {
        times_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (RoomId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(RoomId);
      }
      if (LordId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(LordId);
      }
      cardsNum_.WriteTo(output, _repeated_cardsNum_codec);
      if (Times != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Times);
      }
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (ActorId != 0L) {
        output.WriteRawTag(240, 5);
        output.WriteInt64(ActorId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (ActorId != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(ActorId);
      }
      if (RoomId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RoomId);
      }
      if (LordId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(LordId);
      }
      size += cardsNum_.CalculateSize(_repeated_cardsNum_codec);
      if (Times != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Times);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      roomId_ = 0;
      lordId_ = 0;
      cardsNum_.Clear();
      times_ = 0;
      rpcId_ = 0;
      actorId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            RoomId = input.ReadInt32();
            break;
          }
          case 16: {
            LordId = input.ReadInt32();
            break;
          }
          case 26:
          case 24: {
            cardsNum_.AddEntriesFrom(input, _repeated_cardsNum_codec);
            break;
          }
          case 32: {
            Times = input.ReadInt32();
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 752: {
            ActorId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public partial class DDZCard : pb::IMessage {
    private static readonly pb::MessageParser<DDZCard> _parser = new pb::MessageParser<DDZCard>(() => (DDZCard)MessagePool.Instance.Fetch(typeof(DDZCard)));
    public static pb::MessageParser<DDZCard> Parser { get { return _parser; } }

    private pb::ByteString card_ = pb::ByteString.Empty;
    public pb::ByteString Card {
      get { return card_; }
      set {
        card_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private int paiXing_;
    public int PaiXing {
      get { return paiXing_; }
      set {
        paiXing_ = value;
      }
    }

    private string points_ = "";
    public string Points {
      get { return points_; }
      set {
        points_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private int value_;
    public int Value {
      get { return value_; }
      set {
        value_ = value;
      }
    }

    private int cardsNum_;
    public int CardsNum {
      get { return cardsNum_; }
      set {
        cardsNum_ = value;
      }
    }

    private long userId_;
    public long UserId {
      get { return userId_; }
      set {
        userId_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Card.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(Card);
      }
      if (PaiXing != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(PaiXing);
      }
      if (Points.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Points);
      }
      if (Value != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Value);
      }
      if (CardsNum != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(CardsNum);
      }
      if (UserId != 0L) {
        output.WriteRawTag(48);
        output.WriteInt64(UserId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (Card.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Card);
      }
      if (PaiXing != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PaiXing);
      }
      if (Points.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Points);
      }
      if (Value != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Value);
      }
      if (CardsNum != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CardsNum);
      }
      if (UserId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(UserId);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      card_ = pb::ByteString.Empty;
      paiXing_ = 0;
      points_ = "";
      value_ = 0;
      cardsNum_ = 0;
      userId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Card = input.ReadBytes();
            break;
          }
          case 16: {
            PaiXing = input.ReadInt32();
            break;
          }
          case 26: {
            Points = input.ReadString();
            break;
          }
          case 32: {
            Value = input.ReadInt32();
            break;
          }
          case 40: {
            CardsNum = input.ReadInt32();
            break;
          }
          case 48: {
            UserId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public partial class Actor_DDZDealHandCard_Ntt : pb::IMessage {
    private static readonly pb::MessageParser<Actor_DDZDealHandCard_Ntt> _parser = new pb::MessageParser<Actor_DDZDealHandCard_Ntt>(() => (Actor_DDZDealHandCard_Ntt)MessagePool.Instance.Fetch(typeof(Actor_DDZDealHandCard_Ntt)));
    public static pb::MessageParser<Actor_DDZDealHandCard_Ntt> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private long actorId_;
    public long ActorId {
      get { return actorId_; }
      set {
        actorId_ = value;
      }
    }

    private int roomId_;
    public int RoomId {
      get { return roomId_; }
      set {
        roomId_ = value;
      }
    }

    private long userId_;
    public long UserId {
      get { return userId_; }
      set {
        userId_ = value;
      }
    }

    private global::ETHotfix.DDZCard card_;
    public global::ETHotfix.DDZCard Card {
      get { return card_; }
      set {
        card_ = value;
      }
    }

    private static readonly pb::FieldCodec<int> _repeated_surCardsNum_codec
        = pb::FieldCodec.ForInt32(34);
    private pbc::RepeatedField<int> surCardsNum_ = new pbc::RepeatedField<int>();
    public pbc::RepeatedField<int> SurCardsNum {
      get { return surCardsNum_; }
      set { surCardsNum_ = value; }
    }

    private global::ETHotfix.DDZCard dpCard_;
    public global::ETHotfix.DDZCard DpCard {
      get { return dpCard_; }
      set {
        dpCard_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (RoomId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(RoomId);
      }
      if (UserId != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(UserId);
      }
      if (card_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Card);
      }
      surCardsNum_.WriteTo(output, _repeated_surCardsNum_codec);
      if (dpCard_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(DpCard);
      }
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (ActorId != 0L) {
        output.WriteRawTag(240, 5);
        output.WriteInt64(ActorId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (ActorId != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(ActorId);
      }
      if (RoomId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RoomId);
      }
      if (UserId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(UserId);
      }
      if (card_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Card);
      }
      size += surCardsNum_.CalculateSize(_repeated_surCardsNum_codec);
      if (dpCard_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(DpCard);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      roomId_ = 0;
      userId_ = 0;
      if (card_ != null) MessagePool.Instance.Recycle(card_); card_ = null;
      surCardsNum_.Clear();
      if (dpCard_ != null) MessagePool.Instance.Recycle(dpCard_); dpCard_ = null;
      rpcId_ = 0;
      actorId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            RoomId = input.ReadInt32();
            break;
          }
          case 16: {
            UserId = input.ReadInt64();
            break;
          }
          case 26: {
            if (card_ == null) {
              card_ = new global::ETHotfix.DDZCard();
            }
            input.ReadMessage(card_);
            break;
          }
          case 34:
          case 32: {
            surCardsNum_.AddEntriesFrom(input, _repeated_surCardsNum_codec);
            break;
          }
          case 42: {
            if (dpCard_ == null) {
              dpCard_ = new global::ETHotfix.DDZCard();
            }
            input.ReadMessage(dpCard_);
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 752: {
            ActorId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public partial class C2G_DDZPlayCard_Req : pb::IMessage {
    private static readonly pb::MessageParser<C2G_DDZPlayCard_Req> _parser = new pb::MessageParser<C2G_DDZPlayCard_Req>(() => (C2G_DDZPlayCard_Req)MessagePool.Instance.Fetch(typeof(C2G_DDZPlayCard_Req)));
    public static pb::MessageParser<C2G_DDZPlayCard_Req> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private int gameId_;
    public int GameId {
      get { return gameId_; }
      set {
        gameId_ = value;
      }
    }

    private int areaId_;
    public int AreaId {
      get { return areaId_; }
      set {
        areaId_ = value;
      }
    }

    private int roomId_;
    public int RoomId {
      get { return roomId_; }
      set {
        roomId_ = value;
      }
    }

    private long userId_;
    public long UserId {
      get { return userId_; }
      set {
        userId_ = value;
      }
    }

    private int playCardStatue_;
    public int PlayCardStatue {
      get { return playCardStatue_; }
      set {
        playCardStatue_ = value;
      }
    }

    private global::ETHotfix.DDZCard playCard_;
    public global::ETHotfix.DDZCard PlayCard {
      get { return playCard_; }
      set {
        playCard_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (GameId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(GameId);
      }
      if (AreaId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(AreaId);
      }
      if (RoomId != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(RoomId);
      }
      if (UserId != 0L) {
        output.WriteRawTag(32);
        output.WriteInt64(UserId);
      }
      if (PlayCardStatue != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(PlayCardStatue);
      }
      if (playCard_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(PlayCard);
      }
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (GameId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(GameId);
      }
      if (AreaId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(AreaId);
      }
      if (RoomId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RoomId);
      }
      if (UserId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(UserId);
      }
      if (PlayCardStatue != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PlayCardStatue);
      }
      if (playCard_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(PlayCard);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      gameId_ = 0;
      areaId_ = 0;
      roomId_ = 0;
      userId_ = 0;
      playCardStatue_ = 0;
      if (playCard_ != null) MessagePool.Instance.Recycle(playCard_); playCard_ = null;
      rpcId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            GameId = input.ReadInt32();
            break;
          }
          case 16: {
            AreaId = input.ReadInt32();
            break;
          }
          case 24: {
            RoomId = input.ReadInt32();
            break;
          }
          case 32: {
            UserId = input.ReadInt64();
            break;
          }
          case 40: {
            PlayCardStatue = input.ReadInt32();
            break;
          }
          case 50: {
            if (playCard_ == null) {
              playCard_ = new global::ETHotfix.DDZCard();
            }
            input.ReadMessage(playCard_);
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public partial class G2C_DDZPlayCard_Res : pb::IMessage {
    private static readonly pb::MessageParser<G2C_DDZPlayCard_Res> _parser = new pb::MessageParser<G2C_DDZPlayCard_Res>(() => (G2C_DDZPlayCard_Res)MessagePool.Instance.Fetch(typeof(G2C_DDZPlayCard_Res)));
    public static pb::MessageParser<G2C_DDZPlayCard_Res> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private int error_;
    public int Error {
      get { return error_; }
      set {
        error_ = value;
      }
    }

    private string message_ = "";
    public string Message {
      get { return message_; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private long userId_;
    public long UserId {
      get { return userId_; }
      set {
        userId_ = value;
      }
    }

    private global::ETHotfix.DDZCard playCard_;
    public global::ETHotfix.DDZCard PlayCard {
      get { return playCard_; }
      set {
        playCard_ = value;
      }
    }

    private global::ETHotfix.DDZCard card_;
    public global::ETHotfix.DDZCard Card {
      get { return card_; }
      set {
        card_ = value;
      }
    }

    private static readonly pb::FieldCodec<int> _repeated_surCardsNum_codec
        = pb::FieldCodec.ForInt32(34);
    private pbc::RepeatedField<int> surCardsNum_ = new pbc::RepeatedField<int>();
    public pbc::RepeatedField<int> SurCardsNum {
      get { return surCardsNum_; }
      set { surCardsNum_ = value; }
    }

    private int nextChairId_;
    public int NextChairId {
      get { return nextChairId_; }
      set {
        nextChairId_ = value;
      }
    }

    private int times_;
    public int Times {
      get { return times_; }
      set {
        times_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (UserId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(UserId);
      }
      if (playCard_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(PlayCard);
      }
      if (card_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Card);
      }
      surCardsNum_.WriteTo(output, _repeated_surCardsNum_codec);
      if (NextChairId != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(NextChairId);
      }
      if (Times != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(Times);
      }
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (Error != 0) {
        output.WriteRawTag(216, 5);
        output.WriteInt32(Error);
      }
      if (Message.Length != 0) {
        output.WriteRawTag(226, 5);
        output.WriteString(Message);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (Error != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Error);
      }
      if (Message.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Message);
      }
      if (UserId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(UserId);
      }
      if (playCard_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(PlayCard);
      }
      if (card_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Card);
      }
      size += surCardsNum_.CalculateSize(_repeated_surCardsNum_codec);
      if (NextChairId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(NextChairId);
      }
      if (Times != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Times);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      userId_ = 0;
      if (playCard_ != null) MessagePool.Instance.Recycle(playCard_); playCard_ = null;
      if (card_ != null) MessagePool.Instance.Recycle(card_); card_ = null;
      surCardsNum_.Clear();
      nextChairId_ = 0;
      times_ = 0;
      rpcId_ = 0;
      error_ = 0;
      message_ = "";
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            UserId = input.ReadInt64();
            break;
          }
          case 18: {
            if (playCard_ == null) {
              playCard_ = new global::ETHotfix.DDZCard();
            }
            input.ReadMessage(playCard_);
            break;
          }
          case 26: {
            if (card_ == null) {
              card_ = new global::ETHotfix.DDZCard();
            }
            input.ReadMessage(card_);
            break;
          }
          case 34:
          case 32: {
            surCardsNum_.AddEntriesFrom(input, _repeated_surCardsNum_codec);
            break;
          }
          case 40: {
            NextChairId = input.ReadInt32();
            break;
          }
          case 48: {
            Times = input.ReadInt32();
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 728: {
            Error = input.ReadInt32();
            break;
          }
          case 738: {
            Message = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public partial class Actor_DDZhSettlement_Req_Ntt : pb::IMessage {
    private static readonly pb::MessageParser<Actor_DDZhSettlement_Req_Ntt> _parser = new pb::MessageParser<Actor_DDZhSettlement_Req_Ntt>(() => (Actor_DDZhSettlement_Req_Ntt)MessagePool.Instance.Fetch(typeof(Actor_DDZhSettlement_Req_Ntt)));
    public static pb::MessageParser<Actor_DDZhSettlement_Req_Ntt> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private long actorId_;
    public long ActorId {
      get { return actorId_; }
      set {
        actorId_ = value;
      }
    }

    private int roomId_;
    public int RoomId {
      get { return roomId_; }
      set {
        roomId_ = value;
      }
    }

    private string message1_ = "";
    public string Message1 {
      get { return message1_; }
      set {
        message1_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private static readonly pb::FieldCodec<global::ETHotfix.DDZPlayerInfo> _repeated_playerData_codec
        = pb::FieldCodec.ForMessage(26, global::ETHotfix.DDZPlayerInfo.Parser);
    private pbc::RepeatedField<global::ETHotfix.DDZPlayerInfo> playerData_ = new pbc::RepeatedField<global::ETHotfix.DDZPlayerInfo>();
    public pbc::RepeatedField<global::ETHotfix.DDZPlayerInfo> PlayerData {
      get { return playerData_; }
      set { playerData_ = value; }
    }

    private static readonly pb::FieldCodec<int> _repeated_otherData_codec
        = pb::FieldCodec.ForInt32(34);
    private pbc::RepeatedField<int> otherData_ = new pbc::RepeatedField<int>();
    public pbc::RepeatedField<int> OtherData {
      get { return otherData_; }
      set { otherData_ = value; }
    }

    private static readonly pb::FieldCodec<global::ETHotfix.DDZCard> _repeated_showHand_codec
        = pb::FieldCodec.ForMessage(42, global::ETHotfix.DDZCard.Parser);
    private pbc::RepeatedField<global::ETHotfix.DDZCard> showHand_ = new pbc::RepeatedField<global::ETHotfix.DDZCard>();
    public pbc::RepeatedField<global::ETHotfix.DDZCard> ShowHand {
      get { return showHand_; }
      set { showHand_ = value; }
    }

    private static readonly pb::FieldCodec<int> _repeated_beishu_codec
        = pb::FieldCodec.ForInt32(50);
    private pbc::RepeatedField<int> beishu_ = new pbc::RepeatedField<int>();
    public pbc::RepeatedField<int> Beishu {
      get { return beishu_; }
      set { beishu_ = value; }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (RoomId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(RoomId);
      }
      if (Message1.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Message1);
      }
      playerData_.WriteTo(output, _repeated_playerData_codec);
      otherData_.WriteTo(output, _repeated_otherData_codec);
      showHand_.WriteTo(output, _repeated_showHand_codec);
      beishu_.WriteTo(output, _repeated_beishu_codec);
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (ActorId != 0L) {
        output.WriteRawTag(240, 5);
        output.WriteInt64(ActorId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (ActorId != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(ActorId);
      }
      if (RoomId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RoomId);
      }
      if (Message1.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Message1);
      }
      size += playerData_.CalculateSize(_repeated_playerData_codec);
      size += otherData_.CalculateSize(_repeated_otherData_codec);
      size += showHand_.CalculateSize(_repeated_showHand_codec);
      size += beishu_.CalculateSize(_repeated_beishu_codec);
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      roomId_ = 0;
      message1_ = "";
      for (int i = 0; i < playerData_.Count; i++) { MessagePool.Instance.Recycle(playerData_[i]); }
      playerData_.Clear();
      otherData_.Clear();
      for (int i = 0; i < showHand_.Count; i++) { MessagePool.Instance.Recycle(showHand_[i]); }
      showHand_.Clear();
      beishu_.Clear();
      rpcId_ = 0;
      actorId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            RoomId = input.ReadInt32();
            break;
          }
          case 18: {
            Message1 = input.ReadString();
            break;
          }
          case 26: {
            playerData_.AddEntriesFrom(input, _repeated_playerData_codec);
            break;
          }
          case 34:
          case 32: {
            otherData_.AddEntriesFrom(input, _repeated_otherData_codec);
            break;
          }
          case 42: {
            showHand_.AddEntriesFrom(input, _repeated_showHand_codec);
            break;
          }
          case 50:
          case 48: {
            beishu_.AddEntriesFrom(input, _repeated_beishu_codec);
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 752: {
            ActorId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public partial class Actor_FirstQdz_Req_Ntt : pb::IMessage {
    private static readonly pb::MessageParser<Actor_FirstQdz_Req_Ntt> _parser = new pb::MessageParser<Actor_FirstQdz_Req_Ntt>(() => (Actor_FirstQdz_Req_Ntt)MessagePool.Instance.Fetch(typeof(Actor_FirstQdz_Req_Ntt)));
    public static pb::MessageParser<Actor_FirstQdz_Req_Ntt> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private long actorId_;
    public long ActorId {
      get { return actorId_; }
      set {
        actorId_ = value;
      }
    }

    private int chairId_;
    public int ChairId {
      get { return chairId_; }
      set {
        chairId_ = value;
      }
    }

    private int roomId_;
    public int RoomId {
      get { return roomId_; }
      set {
        roomId_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (ChairId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ChairId);
      }
      if (RoomId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(RoomId);
      }
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (ActorId != 0L) {
        output.WriteRawTag(240, 5);
        output.WriteInt64(ActorId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (ActorId != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(ActorId);
      }
      if (ChairId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ChairId);
      }
      if (RoomId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RoomId);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      chairId_ = 0;
      roomId_ = 0;
      rpcId_ = 0;
      actorId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ChairId = input.ReadInt32();
            break;
          }
          case 16: {
            RoomId = input.ReadInt32();
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 752: {
            ActorId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public partial class Actor_DDZTurnPlayer_Ntt : pb::IMessage {
    private static readonly pb::MessageParser<Actor_DDZTurnPlayer_Ntt> _parser = new pb::MessageParser<Actor_DDZTurnPlayer_Ntt>(() => (Actor_DDZTurnPlayer_Ntt)MessagePool.Instance.Fetch(typeof(Actor_DDZTurnPlayer_Ntt)));
    public static pb::MessageParser<Actor_DDZTurnPlayer_Ntt> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private long actorId_;
    public long ActorId {
      get { return actorId_; }
      set {
        actorId_ = value;
      }
    }

    private string message1_ = "";
    public string Message1 {
      get { return message1_; }
      set {
        message1_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private int roomId_;
    public int RoomId {
      get { return roomId_; }
      set {
        roomId_ = value;
      }
    }

    private int operateId_;
    public int OperateId {
      get { return operateId_; }
      set {
        operateId_ = value;
      }
    }

    private int leftTime_;
    public int LeftTime {
      get { return leftTime_; }
      set {
        leftTime_ = value;
      }
    }

    private int state_;
    public int State {
      get { return state_; }
      set {
        state_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Message1.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Message1);
      }
      if (RoomId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(RoomId);
      }
      if (OperateId != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(OperateId);
      }
      if (LeftTime != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(LeftTime);
      }
      if (State != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(State);
      }
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (ActorId != 0L) {
        output.WriteRawTag(240, 5);
        output.WriteInt64(ActorId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (ActorId != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(ActorId);
      }
      if (Message1.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Message1);
      }
      if (RoomId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RoomId);
      }
      if (OperateId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(OperateId);
      }
      if (LeftTime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(LeftTime);
      }
      if (State != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(State);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      message1_ = "";
      roomId_ = 0;
      operateId_ = 0;
      leftTime_ = 0;
      state_ = 0;
      rpcId_ = 0;
      actorId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Message1 = input.ReadString();
            break;
          }
          case 16: {
            RoomId = input.ReadInt32();
            break;
          }
          case 24: {
            OperateId = input.ReadInt32();
            break;
          }
          case 32: {
            LeftTime = input.ReadInt32();
            break;
          }
          case 40: {
            State = input.ReadInt32();
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 752: {
            ActorId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public partial class Actor_DDZLord_Ntt : pb::IMessage {
    private static readonly pb::MessageParser<Actor_DDZLord_Ntt> _parser = new pb::MessageParser<Actor_DDZLord_Ntt>(() => (Actor_DDZLord_Ntt)MessagePool.Instance.Fetch(typeof(Actor_DDZLord_Ntt)));
    public static pb::MessageParser<Actor_DDZLord_Ntt> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private long actorId_;
    public long ActorId {
      get { return actorId_; }
      set {
        actorId_ = value;
      }
    }

    private string message1_ = "";
    public string Message1 {
      get { return message1_; }
      set {
        message1_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private int roomId_;
    public int RoomId {
      get { return roomId_; }
      set {
        roomId_ = value;
      }
    }

    private long userId_;
    public long UserId {
      get { return userId_; }
      set {
        userId_ = value;
      }
    }

    private global::ETHotfix.DDZCard handCards_;
    public global::ETHotfix.DDZCard HandCards {
      get { return handCards_; }
      set {
        handCards_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Message1.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Message1);
      }
      if (RoomId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(RoomId);
      }
      if (UserId != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(UserId);
      }
      if (handCards_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(HandCards);
      }
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (ActorId != 0L) {
        output.WriteRawTag(240, 5);
        output.WriteInt64(ActorId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (ActorId != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(ActorId);
      }
      if (Message1.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Message1);
      }
      if (RoomId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RoomId);
      }
      if (UserId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(UserId);
      }
      if (handCards_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(HandCards);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      message1_ = "";
      roomId_ = 0;
      userId_ = 0;
      if (handCards_ != null) MessagePool.Instance.Recycle(handCards_); handCards_ = null;
      rpcId_ = 0;
      actorId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Message1 = input.ReadString();
            break;
          }
          case 16: {
            RoomId = input.ReadInt32();
            break;
          }
          case 24: {
            UserId = input.ReadInt64();
            break;
          }
          case 34: {
            if (handCards_ == null) {
              handCards_ = new global::ETHotfix.DDZCard();
            }
            input.ReadMessage(handCards_);
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 752: {
            ActorId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public partial class Actor_OtherPlayCard_Ntt : pb::IMessage {
    private static readonly pb::MessageParser<Actor_OtherPlayCard_Ntt> _parser = new pb::MessageParser<Actor_OtherPlayCard_Ntt>(() => (Actor_OtherPlayCard_Ntt)MessagePool.Instance.Fetch(typeof(Actor_OtherPlayCard_Ntt)));
    public static pb::MessageParser<Actor_OtherPlayCard_Ntt> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private long actorId_;
    public long ActorId {
      get { return actorId_; }
      set {
        actorId_ = value;
      }
    }

    private string message1_ = "";
    public string Message1 {
      get { return message1_; }
      set {
        message1_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private int roomId_;
    public int RoomId {
      get { return roomId_; }
      set {
        roomId_ = value;
      }
    }

    private long userId_;
    public long UserId {
      get { return userId_; }
      set {
        userId_ = value;
      }
    }

    private global::ETHotfix.DDZCard playCard_;
    public global::ETHotfix.DDZCard PlayCard {
      get { return playCard_; }
      set {
        playCard_ = value;
      }
    }

    private static readonly pb::FieldCodec<int> _repeated_surCardsNum_codec
        = pb::FieldCodec.ForInt32(42);
    private pbc::RepeatedField<int> surCardsNum_ = new pbc::RepeatedField<int>();
    public pbc::RepeatedField<int> SurCardsNum {
      get { return surCardsNum_; }
      set { surCardsNum_ = value; }
    }

    private int chairId_;
    public int ChairId {
      get { return chairId_; }
      set {
        chairId_ = value;
      }
    }

    private int times_;
    public int Times {
      get { return times_; }
      set {
        times_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Message1.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Message1);
      }
      if (RoomId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(RoomId);
      }
      if (UserId != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(UserId);
      }
      if (playCard_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(PlayCard);
      }
      surCardsNum_.WriteTo(output, _repeated_surCardsNum_codec);
      if (ChairId != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(ChairId);
      }
      if (Times != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(Times);
      }
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (ActorId != 0L) {
        output.WriteRawTag(240, 5);
        output.WriteInt64(ActorId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (ActorId != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(ActorId);
      }
      if (Message1.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Message1);
      }
      if (RoomId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RoomId);
      }
      if (UserId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(UserId);
      }
      if (playCard_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(PlayCard);
      }
      size += surCardsNum_.CalculateSize(_repeated_surCardsNum_codec);
      if (ChairId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ChairId);
      }
      if (Times != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Times);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      message1_ = "";
      roomId_ = 0;
      userId_ = 0;
      if (playCard_ != null) MessagePool.Instance.Recycle(playCard_); playCard_ = null;
      surCardsNum_.Clear();
      chairId_ = 0;
      times_ = 0;
      rpcId_ = 0;
      actorId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Message1 = input.ReadString();
            break;
          }
          case 16: {
            RoomId = input.ReadInt32();
            break;
          }
          case 24: {
            UserId = input.ReadInt64();
            break;
          }
          case 34: {
            if (playCard_ == null) {
              playCard_ = new global::ETHotfix.DDZCard();
            }
            input.ReadMessage(playCard_);
            break;
          }
          case 42:
          case 40: {
            surCardsNum_.AddEntriesFrom(input, _repeated_surCardsNum_codec);
            break;
          }
          case 48: {
            ChairId = input.ReadInt32();
            break;
          }
          case 56: {
            Times = input.ReadInt32();
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 752: {
            ActorId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public partial class Actor_JionDDZRoom_Ntt : pb::IMessage {
    private static readonly pb::MessageParser<Actor_JionDDZRoom_Ntt> _parser = new pb::MessageParser<Actor_JionDDZRoom_Ntt>(() => (Actor_JionDDZRoom_Ntt)MessagePool.Instance.Fetch(typeof(Actor_JionDDZRoom_Ntt)));
    public static pb::MessageParser<Actor_JionDDZRoom_Ntt> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private long actorId_;
    public long ActorId {
      get { return actorId_; }
      set {
        actorId_ = value;
      }
    }

    private string message1_ = "";
    public string Message1 {
      get { return message1_; }
      set {
        message1_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private int roomId_;
    public int RoomId {
      get { return roomId_; }
      set {
        roomId_ = value;
      }
    }

    private long userId_;
    public long UserId {
      get { return userId_; }
      set {
        userId_ = value;
      }
    }

    private global::ETHotfix.DDZPlayerInfo playerData_;
    public global::ETHotfix.DDZPlayerInfo PlayerData {
      get { return playerData_; }
      set {
        playerData_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Message1.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Message1);
      }
      if (RoomId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(RoomId);
      }
      if (UserId != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(UserId);
      }
      if (playerData_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(PlayerData);
      }
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (ActorId != 0L) {
        output.WriteRawTag(240, 5);
        output.WriteInt64(ActorId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (ActorId != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(ActorId);
      }
      if (Message1.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Message1);
      }
      if (RoomId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RoomId);
      }
      if (UserId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(UserId);
      }
      if (playerData_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(PlayerData);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      message1_ = "";
      roomId_ = 0;
      userId_ = 0;
      if (playerData_ != null) MessagePool.Instance.Recycle(playerData_); playerData_ = null;
      rpcId_ = 0;
      actorId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Message1 = input.ReadString();
            break;
          }
          case 16: {
            RoomId = input.ReadInt32();
            break;
          }
          case 24: {
            UserId = input.ReadInt64();
            break;
          }
          case 34: {
            if (playerData_ == null) {
              playerData_ = new global::ETHotfix.DDZPlayerInfo();
            }
            input.ReadMessage(playerData_);
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 752: {
            ActorId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public partial class Actor_QuitDDZHRoom_Ntt : pb::IMessage {
    private static readonly pb::MessageParser<Actor_QuitDDZHRoom_Ntt> _parser = new pb::MessageParser<Actor_QuitDDZHRoom_Ntt>(() => (Actor_QuitDDZHRoom_Ntt)MessagePool.Instance.Fetch(typeof(Actor_QuitDDZHRoom_Ntt)));
    public static pb::MessageParser<Actor_QuitDDZHRoom_Ntt> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private long actorId_;
    public long ActorId {
      get { return actorId_; }
      set {
        actorId_ = value;
      }
    }

    private string message1_ = "";
    public string Message1 {
      get { return message1_; }
      set {
        message1_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private int roomId_;
    public int RoomId {
      get { return roomId_; }
      set {
        roomId_ = value;
      }
    }

    private long userId_;
    public long UserId {
      get { return userId_; }
      set {
        userId_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Message1.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Message1);
      }
      if (RoomId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(RoomId);
      }
      if (UserId != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(UserId);
      }
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (ActorId != 0L) {
        output.WriteRawTag(240, 5);
        output.WriteInt64(ActorId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (ActorId != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(ActorId);
      }
      if (Message1.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Message1);
      }
      if (RoomId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RoomId);
      }
      if (UserId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(UserId);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      message1_ = "";
      roomId_ = 0;
      userId_ = 0;
      rpcId_ = 0;
      actorId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Message1 = input.ReadString();
            break;
          }
          case 16: {
            RoomId = input.ReadInt32();
            break;
          }
          case 24: {
            UserId = input.ReadInt64();
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 752: {
            ActorId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public partial class Actor_OtherPrepare_Ntt : pb::IMessage {
    private static readonly pb::MessageParser<Actor_OtherPrepare_Ntt> _parser = new pb::MessageParser<Actor_OtherPrepare_Ntt>(() => (Actor_OtherPrepare_Ntt)MessagePool.Instance.Fetch(typeof(Actor_OtherPrepare_Ntt)));
    public static pb::MessageParser<Actor_OtherPrepare_Ntt> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private long actorId_;
    public long ActorId {
      get { return actorId_; }
      set {
        actorId_ = value;
      }
    }

    private string message1_ = "";
    public string Message1 {
      get { return message1_; }
      set {
        message1_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private int roomId_;
    public int RoomId {
      get { return roomId_; }
      set {
        roomId_ = value;
      }
    }

    private long userId_;
    public long UserId {
      get { return userId_; }
      set {
        userId_ = value;
      }
    }

    private int chairId_;
    public int ChairId {
      get { return chairId_; }
      set {
        chairId_ = value;
      }
    }

    private bool isPrepare_;
    public bool IsPrepare {
      get { return isPrepare_; }
      set {
        isPrepare_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Message1.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Message1);
      }
      if (RoomId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(RoomId);
      }
      if (UserId != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(UserId);
      }
      if (ChairId != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(ChairId);
      }
      if (IsPrepare != false) {
        output.WriteRawTag(40);
        output.WriteBool(IsPrepare);
      }
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (ActorId != 0L) {
        output.WriteRawTag(240, 5);
        output.WriteInt64(ActorId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (ActorId != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(ActorId);
      }
      if (Message1.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Message1);
      }
      if (RoomId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RoomId);
      }
      if (UserId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(UserId);
      }
      if (ChairId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ChairId);
      }
      if (IsPrepare != false) {
        size += 1 + 1;
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      message1_ = "";
      roomId_ = 0;
      userId_ = 0;
      chairId_ = 0;
      isPrepare_ = false;
      rpcId_ = 0;
      actorId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Message1 = input.ReadString();
            break;
          }
          case 16: {
            RoomId = input.ReadInt32();
            break;
          }
          case 24: {
            UserId = input.ReadInt64();
            break;
          }
          case 32: {
            ChairId = input.ReadInt32();
            break;
          }
          case 40: {
            IsPrepare = input.ReadBool();
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 752: {
            ActorId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public partial class Actor_OtherQdz_Ntt : pb::IMessage {
    private static readonly pb::MessageParser<Actor_OtherQdz_Ntt> _parser = new pb::MessageParser<Actor_OtherQdz_Ntt>(() => (Actor_OtherQdz_Ntt)MessagePool.Instance.Fetch(typeof(Actor_OtherQdz_Ntt)));
    public static pb::MessageParser<Actor_OtherQdz_Ntt> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private long actorId_;
    public long ActorId {
      get { return actorId_; }
      set {
        actorId_ = value;
      }
    }

    private string message1_ = "";
    public string Message1 {
      get { return message1_; }
      set {
        message1_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private int roomId_;
    public int RoomId {
      get { return roomId_; }
      set {
        roomId_ = value;
      }
    }

    private long userId_;
    public long UserId {
      get { return userId_; }
      set {
        userId_ = value;
      }
    }

    private int chairId_;
    public int ChairId {
      get { return chairId_; }
      set {
        chairId_ = value;
      }
    }

    private int score_;
    public int Score {
      get { return score_; }
      set {
        score_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Message1.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Message1);
      }
      if (RoomId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(RoomId);
      }
      if (UserId != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(UserId);
      }
      if (ChairId != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(ChairId);
      }
      if (Score != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(Score);
      }
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (ActorId != 0L) {
        output.WriteRawTag(240, 5);
        output.WriteInt64(ActorId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (ActorId != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(ActorId);
      }
      if (Message1.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Message1);
      }
      if (RoomId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RoomId);
      }
      if (UserId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(UserId);
      }
      if (ChairId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ChairId);
      }
      if (Score != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Score);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      message1_ = "";
      roomId_ = 0;
      userId_ = 0;
      chairId_ = 0;
      score_ = 0;
      rpcId_ = 0;
      actorId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Message1 = input.ReadString();
            break;
          }
          case 16: {
            RoomId = input.ReadInt32();
            break;
          }
          case 24: {
            UserId = input.ReadInt64();
            break;
          }
          case 32: {
            ChairId = input.ReadInt32();
            break;
          }
          case 40: {
            Score = input.ReadInt32();
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 752: {
            ActorId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public partial class C2G_IsBoltback_Req : pb::IMessage {
    private static readonly pb::MessageParser<C2G_IsBoltback_Req> _parser = new pb::MessageParser<C2G_IsBoltback_Req>(() => (C2G_IsBoltback_Req)MessagePool.Instance.Fetch(typeof(C2G_IsBoltback_Req)));
    public static pb::MessageParser<C2G_IsBoltback_Req> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private int gameId_;
    public int GameId {
      get { return gameId_; }
      set {
        gameId_ = value;
      }
    }

    private int areaId_;
    public int AreaId {
      get { return areaId_; }
      set {
        areaId_ = value;
      }
    }

    private int roomId_;
    public int RoomId {
      get { return roomId_; }
      set {
        roomId_ = value;
      }
    }

    private long userId_;
    public long UserId {
      get { return userId_; }
      set {
        userId_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (GameId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(GameId);
      }
      if (AreaId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(AreaId);
      }
      if (RoomId != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(RoomId);
      }
      if (UserId != 0L) {
        output.WriteRawTag(32);
        output.WriteInt64(UserId);
      }
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (GameId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(GameId);
      }
      if (AreaId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(AreaId);
      }
      if (RoomId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RoomId);
      }
      if (UserId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(UserId);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      gameId_ = 0;
      areaId_ = 0;
      roomId_ = 0;
      userId_ = 0;
      rpcId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            GameId = input.ReadInt32();
            break;
          }
          case 16: {
            AreaId = input.ReadInt32();
            break;
          }
          case 24: {
            RoomId = input.ReadInt32();
            break;
          }
          case 32: {
            UserId = input.ReadInt64();
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public partial class G2C_IsBoltback_Res : pb::IMessage {
    private static readonly pb::MessageParser<G2C_IsBoltback_Res> _parser = new pb::MessageParser<G2C_IsBoltback_Res>(() => (G2C_IsBoltback_Res)MessagePool.Instance.Fetch(typeof(G2C_IsBoltback_Res)));
    public static pb::MessageParser<G2C_IsBoltback_Res> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private int error_;
    public int Error {
      get { return error_; }
      set {
        error_ = value;
      }
    }

    private string message_ = "";
    public string Message {
      get { return message_; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private bool isBoltback_;
    public bool IsBoltback {
      get { return isBoltback_; }
      set {
        isBoltback_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (IsBoltback != false) {
        output.WriteRawTag(8);
        output.WriteBool(IsBoltback);
      }
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (Error != 0) {
        output.WriteRawTag(216, 5);
        output.WriteInt32(Error);
      }
      if (Message.Length != 0) {
        output.WriteRawTag(226, 5);
        output.WriteString(Message);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (Error != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Error);
      }
      if (Message.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Message);
      }
      if (IsBoltback != false) {
        size += 1 + 1;
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      isBoltback_ = false;
      rpcId_ = 0;
      error_ = 0;
      message_ = "";
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            IsBoltback = input.ReadBool();
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 728: {
            Error = input.ReadInt32();
            break;
          }
          case 738: {
            Message = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public partial class Actor_UpdateUserInfo_Ntt : pb::IMessage {
    private static readonly pb::MessageParser<Actor_UpdateUserInfo_Ntt> _parser = new pb::MessageParser<Actor_UpdateUserInfo_Ntt>(() => (Actor_UpdateUserInfo_Ntt)MessagePool.Instance.Fetch(typeof(Actor_UpdateUserInfo_Ntt)));
    public static pb::MessageParser<Actor_UpdateUserInfo_Ntt> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private long actorId_;
    public long ActorId {
      get { return actorId_; }
      set {
        actorId_ = value;
      }
    }

    private global::ETHotfix.UserInfo userInfo_;
    public global::ETHotfix.UserInfo UserInfo {
      get { return userInfo_; }
      set {
        userInfo_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (userInfo_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(UserInfo);
      }
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (ActorId != 0L) {
        output.WriteRawTag(240, 5);
        output.WriteInt64(ActorId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (ActorId != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(ActorId);
      }
      if (userInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(UserInfo);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      if (userInfo_ != null) MessagePool.Instance.Recycle(userInfo_); userInfo_ = null;
      rpcId_ = 0;
      actorId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (userInfo_ == null) {
              userInfo_ = new global::ETHotfix.UserInfo();
            }
            input.ReadMessage(userInfo_);
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 752: {
            ActorId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public partial class MailInfo : pb::IMessage {
    private static readonly pb::MessageParser<MailInfo> _parser = new pb::MessageParser<MailInfo>(() => (MailInfo)MessagePool.Instance.Fetch(typeof(MailInfo)));
    public static pb::MessageParser<MailInfo> Parser { get { return _parser; } }

    private string title_ = "";
    public string Title {
      get { return title_; }
      set {
        title_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private string content_ = "";
    public string Content {
      get { return content_; }
      set {
        content_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private string timestamp_ = "";
    public string Timestamp {
      get { return timestamp_; }
      set {
        timestamp_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Title.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Title);
      }
      if (Content.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Content);
      }
      if (Timestamp.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Timestamp);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (Title.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Title);
      }
      if (Content.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Content);
      }
      if (Timestamp.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Timestamp);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      title_ = "";
      content_ = "";
      timestamp_ = "";
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Title = input.ReadString();
            break;
          }
          case 18: {
            Content = input.ReadString();
            break;
          }
          case 26: {
            Timestamp = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public partial class C2G_MailAsk_Req : pb::IMessage {
    private static readonly pb::MessageParser<C2G_MailAsk_Req> _parser = new pb::MessageParser<C2G_MailAsk_Req>(() => (C2G_MailAsk_Req)MessagePool.Instance.Fetch(typeof(C2G_MailAsk_Req)));
    public static pb::MessageParser<C2G_MailAsk_Req> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private long userId_;
    /// <summary>
    ///UserId
    /// </summary>
    public long UserId {
      get { return userId_; }
      set {
        userId_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (UserId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(UserId);
      }
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (UserId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(UserId);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      userId_ = 0;
      rpcId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            UserId = input.ReadInt64();
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public partial class G2C_MailReturn_Res : pb::IMessage {
    private static readonly pb::MessageParser<G2C_MailReturn_Res> _parser = new pb::MessageParser<G2C_MailReturn_Res>(() => (G2C_MailReturn_Res)MessagePool.Instance.Fetch(typeof(G2C_MailReturn_Res)));
    public static pb::MessageParser<G2C_MailReturn_Res> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private int error_;
    public int Error {
      get { return error_; }
      set {
        error_ = value;
      }
    }

    private string message_ = "";
    public string Message {
      get { return message_; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private static readonly pb::FieldCodec<global::ETHotfix.MailInfo> _repeated_info_codec
        = pb::FieldCodec.ForMessage(10, global::ETHotfix.MailInfo.Parser);
    private pbc::RepeatedField<global::ETHotfix.MailInfo> info_ = new pbc::RepeatedField<global::ETHotfix.MailInfo>();
    public pbc::RepeatedField<global::ETHotfix.MailInfo> Info {
      get { return info_; }
      set { info_ = value; }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      info_.WriteTo(output, _repeated_info_codec);
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (Error != 0) {
        output.WriteRawTag(216, 5);
        output.WriteInt32(Error);
      }
      if (Message.Length != 0) {
        output.WriteRawTag(226, 5);
        output.WriteString(Message);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (Error != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Error);
      }
      if (Message.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Message);
      }
      size += info_.CalculateSize(_repeated_info_codec);
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      for (int i = 0; i < info_.Count; i++) { MessagePool.Instance.Recycle(info_[i]); }
      info_.Clear();
      rpcId_ = 0;
      error_ = 0;
      message_ = "";
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            info_.AddEntriesFrom(input, _repeated_info_codec);
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 728: {
            Error = input.ReadInt32();
            break;
          }
          case 738: {
            Message = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public partial class Actor_ScrollToNotice_Ntt : pb::IMessage {
    private static readonly pb::MessageParser<Actor_ScrollToNotice_Ntt> _parser = new pb::MessageParser<Actor_ScrollToNotice_Ntt>(() => (Actor_ScrollToNotice_Ntt)MessagePool.Instance.Fetch(typeof(Actor_ScrollToNotice_Ntt)));
    public static pb::MessageParser<Actor_ScrollToNotice_Ntt> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private long actorId_;
    public long ActorId {
      get { return actorId_; }
      set {
        actorId_ = value;
      }
    }

    private string content_ = "";
    public string Content {
      get { return content_; }
      set {
        content_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Content.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Content);
      }
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (ActorId != 0L) {
        output.WriteRawTag(240, 5);
        output.WriteInt64(ActorId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (ActorId != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(ActorId);
      }
      if (Content.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Content);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      content_ = "";
      rpcId_ = 0;
      actorId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Content = input.ReadString();
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 752: {
            ActorId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
